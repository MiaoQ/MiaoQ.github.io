<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>影子烤焦了</title>
  
  <subtitle>脑海中起毛球的记忆。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://miaoq.github.io/"/>
  <updated>2019-05-05T15:25:14.777Z</updated>
  <id>https://miaoq.github.io/</id>
  
  <author>
    <name>影子烤焦了</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>echarts的简单使用</title>
    <link href="https://miaoq.github.io/2019/05/05/tips-2019-05-05-echarts%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/"/>
    <id>https://miaoq.github.io/2019/05/05/tips-2019-05-05-echarts的简单使用/</id>
    <published>2019-05-05T11:32:04.000Z</published>
    <updated>2019-05-05T15:25:14.777Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>安装<code>echarts</code></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install echarts --save</span><br></pre></td></tr></table></figure></li><li><p>在react组件文件中引入相关依赖</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> echarts <span class="keyword">from</span> <span class="string">'echarts/lib/echarts'</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'echarts/lib/chart/pie'</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'echarts/lib/component/graphic'</span></span><br></pre></td></tr></table></figure></li><li><p>配置饼图数据</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> option = &#123;</span><br><span class="line">  <span class="string">"graphic"</span>: [&#123; <span class="comment">// 设置圆环内的文本内容</span></span><br><span class="line">    <span class="string">"type"</span>: <span class="string">"text"</span>,</span><br><span class="line">    <span class="string">"left"</span>: <span class="string">"center"</span>,</span><br><span class="line">    <span class="string">"top"</span>: <span class="string">"40%"</span>, <span class="comment">// 文字位置</span></span><br><span class="line">    <span class="string">"style"</span>: &#123;</span><br><span class="line">      <span class="string">"text"</span>: <span class="string">"总人数"</span>,</span><br><span class="line">      <span class="string">"fill"</span>: <span class="string">"#666"</span>,</span><br><span class="line">      <span class="string">"textAlign"</span>: <span class="string">"center"</span>,</span><br><span class="line">      <span class="string">"fontSize"</span>: <span class="number">16</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, &#123;</span><br><span class="line">    <span class="string">"type"</span>: <span class="string">"text"</span>,</span><br><span class="line">    <span class="string">"left"</span>: <span class="string">"center"</span>,</span><br><span class="line">    <span class="string">"top"</span>: <span class="string">"50%"</span>,</span><br><span class="line">    <span class="string">"style"</span>: &#123;</span><br><span class="line">      <span class="string">"text"</span>: <span class="string">"100个"</span>,</span><br><span class="line">      <span class="string">"fill"</span>: <span class="string">"#1b1d1e"</span>,</span><br><span class="line">      <span class="string">"fontSize"</span>: <span class="number">24</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;],</span><br><span class="line">  <span class="string">"series"</span>: [&#123; <span class="comment">// 环，这里可以是对象，也可以是数组，只有一项时可用对象；多项时，多个环</span></span><br><span class="line">    <span class="string">"type"</span>: <span class="string">"pie"</span>,</span><br><span class="line">    <span class="string">"radius"</span>: [<span class="string">"50%"</span>, <span class="string">"54%"</span>], <span class="comment">// 环的粗细</span></span><br><span class="line">    <span class="string">"itemStyle"</span>: &#123;</span><br><span class="line">      <span class="string">"shadowBlur"</span>: <span class="number">10</span>,</span><br><span class="line">      <span class="string">"shadowOffsetX"</span>: <span class="number">0</span>,</span><br><span class="line">      <span class="string">"shadowOffsetY"</span>: <span class="number">4</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"rich"</span>: &#123; <span class="comment">// 富文本样式</span></span><br><span class="line">      <span class="string">"name"</span>: &#123;</span><br><span class="line">        <span class="string">"color"</span>: <span class="string">"#666c70"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">"value"</span>: &#123;</span><br><span class="line">        <span class="string">"color"</span>: <span class="string">"#1b1d1e"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"label"</span>: &#123; <span class="comment">// 统一设置环的标签样式</span></span><br><span class="line">      <span class="string">"textStyle"</span>: &#123;</span><br><span class="line">        <span class="string">"fontSize"</span>: <span class="number">14</span>,</span><br><span class="line">        <span class="string">"lineHeight"</span>: <span class="number">22</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"labelLine"</span>: &#123; <span class="comment">// 统一设置环的线样式</span></span><br><span class="line">      <span class="string">"lineStyle"</span>: &#123;</span><br><span class="line">        <span class="string">"color"</span>: <span class="string">"#e0e6ec"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">"length2"</span>: <span class="number">40</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"data"</span>: [&#123; <span class="comment">// 具体的数据项，可针对不同的数据项设置不同的样式</span></span><br><span class="line">      <span class="string">"name"</span>: <span class="string">"男生"</span>,</span><br><span class="line">      <span class="string">"value"</span>: <span class="number">60</span>,</span><br><span class="line">      <span class="string">"label"</span>: &#123; <span class="comment">// 对数据项设置标签样式</span></span><br><span class="line">        <span class="string">"show"</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="string">"rich"</span>: &#123; <span class="comment">// 数据项的富文本，在下面的formatter里使用了</span></span><br><span class="line">          <span class="string">"name"</span>: &#123;</span><br><span class="line">            <span class="string">"color"</span>: <span class="string">"#666c70"</span>,</span><br><span class="line">            <span class="string">"fontSize"</span>: <span class="number">14</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="string">"value"</span>: &#123;</span><br><span class="line">            <span class="string">"color"</span>: <span class="string">"#1b1d1e"</span>,</span><br><span class="line">            <span class="string">"fontSize"</span>: <span class="number">14</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// &#123;a&#125;指series.name &#123;b&#125;指series.data的name</span></span><br><span class="line">        <span class="comment">// &#123;c&#125;指series.data的value &#123;d&#125;%指这一部分占总数的百分比</span></span><br><span class="line">        <span class="string">"formatter"</span>: <span class="string">"&#123;name|&#123;b&#125;&#125;\n&#123;value|&#123;d&#125;% &#123;c&#125;&#125;"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">"labelLine"</span>: &#123;<span class="comment">// 对数据项设置线的样式</span></span><br><span class="line">        <span class="string">"show"</span>: <span class="literal">true</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">"itemStyle"</span>: &#123;<span class="comment">// 对数据项设置颜色、阴影等</span></span><br><span class="line">        <span class="string">"color"</span>: <span class="string">"#8d81ff"</span>,</span><br><span class="line">        <span class="string">"shadowColor"</span>: <span class="string">"#8d81ff"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;, &#123;</span><br><span class="line">      <span class="string">"name"</span>: <span class="string">"女生"</span>,</span><br><span class="line">      <span class="string">"value"</span>: <span class="number">40</span>,</span><br><span class="line">      <span class="string">"label"</span>: &#123;</span><br><span class="line">        <span class="string">"show"</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="string">"rich"</span>: &#123;</span><br><span class="line">          <span class="string">"name"</span>: &#123;</span><br><span class="line">            <span class="string">"color"</span>: <span class="string">"#666c70"</span>,</span><br><span class="line">            <span class="string">"fontSize"</span>: <span class="number">14</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="string">"value"</span>: &#123;</span><br><span class="line">            <span class="string">"color"</span>: <span class="string">"#1b1d1e"</span>,</span><br><span class="line">            <span class="string">"fontSize"</span>: <span class="number">14</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"formatter"</span>: <span class="string">"&#123;name|&#123;b&#125;&#125;\n&#123;value|&#123;d&#125;% &#123;c&#125;&#125;"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">"labelLine"</span>: &#123;</span><br><span class="line">        <span class="string">"show"</span>: <span class="literal">true</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">"itemStyle"</span>: &#123;</span><br><span class="line">        <span class="string">"color"</span>: <span class="string">"#ff7045"</span>,</span><br><span class="line">        <span class="string">"shadowColor"</span>: <span class="string">"#ff7045"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;]</span><br><span class="line">  &#125;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>画布元素</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"pie"</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">width:</span> '<span class="attr">100</span>%', <span class="attr">height:</span> <span class="attr">300</span> &#125;&#125;&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>初始化图表</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> pieDom = <span class="built_in">document</span>.getElementById(<span class="string">'pie'</span>)</span><br><span class="line"><span class="keyword">const</span> pie = echarts.init(option)</span><br><span class="line">pie.setOption(option)</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      简单描述一下在react中用echarts画出一个圆环图的过程
    
    </summary>
    
    
      <category term="tips" scheme="https://miaoq.github.io/tags/tips/"/>
    
  </entry>
  
  <entry>
    <title>小技巧总结</title>
    <link href="https://miaoq.github.io/2019/05/05/tips-2019-05-05-%E5%B0%8F%E6%8A%80%E5%B7%A7%E6%80%BB%E7%BB%93/"/>
    <id>https://miaoq.github.io/2019/05/05/tips-2019-05-05-小技巧总结/</id>
    <published>2019-05-05T09:06:00.000Z</published>
    <updated>2019-05-05T11:26:45.028Z</updated>
    
    <content type="html"><![CDATA[<h3 id="居中对齐"><a href="#居中对齐" class="headerlink" title="居中对齐"></a>居中对齐</h3><p>关于水平居中对齐、垂直居中对齐，什么<code>margin: auto</code>、<code>line-height</code>…都被总结烂了，这里只列举一种最通用的：在不定宽高的情况下，水平垂直居中一个元素（用这种方法父元素和子元素都需要设置样式）：<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.father</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="selector-class">.child</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">transform</span>: translate(-<span class="number">50%</span>, -<span class="number">50%</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>搞定！前几年css3的普及程度不高，所以大家嫌写前缀麻烦都不喜欢用这种方式，现在都什么年代了，所以，大胆用起来！说一说我喜欢这种方式的理由吧：<br>其一，“不定宽高”，自由洒脱，放荡不羁，这一点还不够吸引人么。<br>其二，这是一段可以靠理解来记忆的css代码，首先，让子元素脱离文档流，但是定位还是要相对于父元素，因而有了<code>.father {position: relative;}</code>和<code>.child {position: absolute;}</code>；然后，让子元素大体上居中<code>.child {top: 50%; left: 50%;}</code>；最后，我们来考虑子元素的宽高问题，让多移动的部分“缩”回去，实现子元素真正“居中”<code>.child {transform: translate(-50%, -50%);}</code>。</p><h3 id="利用vw实现宽度铺满，固定宽高比的背景图"><a href="#利用vw实现宽度铺满，固定宽高比的背景图" class="headerlink" title="利用vw实现宽度铺满，固定宽高比的背景图"></a>利用vw实现宽度铺满，固定宽高比的背景图</h3><p>在一些场景中（如轮播图），我们时常需要图片宽度铺满屏幕，而宽高比为固定值，如4:3，2:1等。此时，vw就派上用场了，vw(viewport width)是视口宽度单位，100vw相当于<code>width: 100%</code>。<br>要实现宽度铺满屏幕，而高度随宽度自适应并保持一定的比例，可采用下面的方式：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"item"</span> <span class="attr">href</span>=<span class="string">"www.baidu.com"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"img"</span> <span class="attr">style</span>=<span class="string">"background-image: url(&#123;&#123;imgUrl&#125;&#125;)"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure></p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100vw</span>;</span><br><span class="line">  <span class="selector-class">.img</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">75vw</span>;</span><br><span class="line">    <span class="attribute">background-size</span>: cover;</span><br><span class="line">    <span class="attribute">background-position</span>: center;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="利用padding实现固定宽高比的背景图"><a href="#利用padding实现固定宽高比的背景图" class="headerlink" title="利用padding实现固定宽高比的背景图"></a>利用padding实现固定宽高比的背景图</h3><p><code>padding</code>在使用百分比设置的时候是相对于宽度来计算的，利用这一点，可以实现固定宽高比的背景图。<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.img</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding-top</span>: <span class="number">75%</span>;</span><br><span class="line">  <span class="attribute">background-size</span>: cover;</span><br><span class="line">  <span class="attribute">background-position</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="利用flex实现每行n个盒子的布局"><a href="#利用flex实现每行n个盒子的布局" class="headerlink" title="利用flex实现每行n个盒子的布局"></a>利用flex实现每行n个盒子的布局</h3><p>以下代码实现了每行三个盒子的布局，当盒子高度不一致时，所有盒子的高度都以最高的那个为准<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-wrap</span>: wrap;</span><br><span class="line">  <span class="attribute">justify-content</span>: space-between;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="selector-tag">&amp;</span><span class="selector-pseudo">::after</span> &#123; <span class="comment">// 添加伪元素解决最后一行为两个盒子时，两端对齐的问题</span></span><br><span class="line">    <span class="attribute">content</span>: <span class="string">""</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">31.5%</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.item</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">31.5%</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      罗列一些常用小技巧，免得老是记不住到处去翻浪费时间
    
    </summary>
    
    
      <category term="tips" scheme="https://miaoq.github.io/tags/tips/"/>
    
  </entry>
  
  <entry>
    <title>导出json数据到excel</title>
    <link href="https://miaoq.github.io/2019/05/05/tips-2019-05-05-%E5%AF%BC%E5%87%BAjson%E6%95%B0%E6%8D%AE%E5%88%B0excel/"/>
    <id>https://miaoq.github.io/2019/05/05/tips-2019-05-05-导出json数据到excel/</id>
    <published>2019-05-05T08:07:21.000Z</published>
    <updated>2019-05-05T08:49:44.608Z</updated>
    
    <content type="html"><![CDATA[<h3 id="安装依赖项"><a href="#安装依赖项" class="headerlink" title="安装依赖项"></a>安装依赖项</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install file-saver --save</span><br><span class="line">npm install xlsx --save</span><br><span class="line">npm install script-loader --save-dev</span><br></pre></td></tr></table></figure><h3 id="下载文件"><a href="#下载文件" class="headerlink" title="下载文件"></a>下载文件</h3><p>下载所需文件<a href="http://xiazai.jb51.net/201708/yuanma/Export2Exce_jb51.rar" target="_blank" rel="noopener">Blob.js和Export2Excel.js</a></p><h3 id="代码组织部分"><a href="#代码组织部分" class="headerlink" title="代码组织部分"></a>代码组织部分</h3><ol><li>在src目录下新建excel文件夹，将上面下载的Blob.js和Export2Excel.js放入excel文件夹中</li><li><p>在存放model的文件中（我这里是store目录下的common.js）添加如下函数，实现将json数据导出为excel文件：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">export2Excel(context, param) &#123; <span class="comment">// 导出excel</span></span><br><span class="line">  <span class="built_in">require</span>.ensure([], () =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; export_json_to_excel &#125; = <span class="built_in">require</span>(<span class="string">'../excel/Export2Excel'</span>)</span><br><span class="line">    <span class="keyword">const</span> &#123; fileName, header, headerKey, dataSource &#125; = param</span><br><span class="line">    <span class="keyword">const</span> data = dataSource.map(<span class="function"><span class="params">v</span> =&gt;</span> headerKey.map(<span class="function"><span class="params">j</span> =&gt;</span> v[j]))</span><br><span class="line">    export_json_to_excel(header, data, fileName)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>当向后台发起“导出”的ajax请求并得到响应后，返回的json数据大致如下：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">res.data = [&#123;</span><br><span class="line">  "id": "01",</span><br><span class="line">  "name": "张三",</span><br><span class="line">  "age": 16,</span><br><span class="line">  "location": "上海"</span><br><span class="line">&#125;, &#123;</span><br><span class="line">  "id": "02",</span><br><span class="line">  "name": "李四",</span><br><span class="line">  "age": 19,</span><br><span class="line">  "location": "杭州"</span><br><span class="line">&#125;]</span><br></pre></td></tr></table></figure></li></ol><p>在成功得到返回数据后，调用export2Excel，将数据导出：<br><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">export2Excel(&#123;</span><br><span class="line">  fileName: <span class="string">'人员信息记录表'</span>,</span><br><span class="line">  header: [<span class="string">'编号'</span>, <span class="string">'姓名'</span>, <span class="string">'年龄'</span>, <span class="string">'地址'</span>],</span><br><span class="line">  headerKey: [<span class="string">'id'</span>, <span class="string">'name'</span>, <span class="string">'age'</span>, <span class="string">'location'</span>],</span><br><span class="line">  dataSource: res.data</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      本文简述了前端如何使用工具导出json数据到excel中
    
    </summary>
    
    
      <category term="tips" scheme="https://miaoq.github.io/tags/tips/"/>
    
  </entry>
  
  <entry>
    <title>webpack</title>
    <link href="https://miaoq.github.io/2019/04/09/utils-2019-04-09-webpack/"/>
    <id>https://miaoq.github.io/2019/04/09/utils-2019-04-09-webpack/</id>
    <published>2019-04-09T09:00:36.000Z</published>
    <updated>2019-04-11T07:53:22.168Z</updated>
    
    <content type="html"><![CDATA[<h3 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a>核心概念</h3><p>webpack的四个核心概念：entry、output、loader、plugins</p><h3 id="mode"><a href="#mode" class="headerlink" title="mode"></a>mode</h3><p>mode 通过选择 development 或 production 之中的一个，来设置 mode 参数，你可以启用相应模式下的 webpack 内置的优化<br><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mode: <span class="string">'production'</span></span><br></pre></td></tr></table></figure></p><p>也可以从cli参数中传递</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">webpack --mode=development/production</span><br><span class="line"><span class="comment">/* 环境不同，启用的插件不同 */</span></span><br></pre></td></tr></table></figure><h3 id="entry"><a href="#entry" class="headerlink" title="entry"></a>entry</h3><p>entry 指示webpack应该使用哪个模块，来作为其构建内部依赖图的开始。进入入口起点后，webpack会找出有哪些模块和库是入口起点（直接和间接）依赖的。<br>entry 的配置值可以是string | object | array<br>可以通过在 webpack 配置中配置 entry 属性，来指定一个入口起点（或多个入口起点）。默认值为 ./src。<br><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">entry: &#123;</span><br><span class="line">  path.join(__dirname, <span class="string">'../src/index.js'</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 此处用了node的path模块，join方法用于连接多个目录，自动区分windows和linux的连接符；__dirname是node的一个全局变量，获得当前文件所在目录的完整目录名 */</span></span><br></pre></td></tr></table></figure></p><h3 id="output"><a href="#output" class="headerlink" title="output"></a>output</h3><p>output 属性告诉 webpack 在哪里输出它所创建的 bundles，以及如何命名这些文件，默认值为 ./dist。</p><p>output 的最低要求是，将它的值设置为一个对象：</p><ol><li>filename 设置输出文件名；</li><li>path 设置目标输出目录的绝对路径。<figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">output: &#123;</span><br><span class="line">  filename: <span class="string">'bundle.js'</span>,</span><br><span class="line">  path: path.join(__dirname, <span class="string">'../dist'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="loader"><a href="#loader" class="headerlink" title="loader"></a>loader</h3><p>loader 用于对模块的源代码进行转换。用于转换某些类型的模块，让 webpack 能够去处理那些非 JavaScript 文件（webpack 自身只理解 JavaScript）。loader 可以将所有类型的文件转换为 webpack 能够处理的有效模块，然后你就可以利用 webpack 的打包能力，对它们进行处理。<br>本质上，webpack loader 将所有类型的文件，转换为应用程序的依赖图（和最终的 bundle）可以直接引用的模块。<br><br>在配置loader时：</p><ol><li>test 用于标识出应该被对应的 loader 进行转换的某个或某些文件;</li><li>use 属性，表示进行转换时，应该使用哪个 loader。</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.vue$/</span>,</span><br><span class="line">        loader: <span class="string">'vue-loader'</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">/*  “嘿，webpack 编译器，当你碰到「在 require()/import 语句中被解析为 '.vue' 的路径」时，在你对它打包之前，先使用 vue-loader 转换一下。” */</span></span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">        use: [</span><br><span class="line">          &#123;</span><br><span class="line">            loader: <span class="string">'style-loader'</span></span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            loader: <span class="string">'css-loader'</span>,</span><br><span class="line">            options: &#123;</span><br><span class="line">              modules: <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line"><span class="string">`</span></span><br></pre></td></tr></table></figure><p>除了通过配置指定loader，还可以通过内联和cli指定（不推荐）<br>除了使用 package.json 常见的 main 属性，还可以将普通的 npm 模块导出为 loader，做法是在 package.json 里定义一个 loader 字段（不明白？）<br>loader 通过（loader）预处理函数，为 JavaScript 生态系统提供了更多能力。 用户现在可以更加灵活地引入细粒度逻辑，例如压缩、打包、语言翻译和其他更多（O__O “…）</p><h3 id="plugins"><a href="#plugins" class="headerlink" title="plugins"></a>plugins</h3><p>plugins 用于执行范围更广的任务，从打包优化和压缩，一直到重新定义环境中的变量。<br><br>想要使用一个插件，你只需要 require() 它，然后把它添加到 plugins 数组中。<br><br>也可以在一个配置文件中因为不同目的而多次使用同一个插件，这时需要通过使用 new 操作符来创建它的一个实例。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> VueLoaderPlugin = <span class="built_in">require</span>(<span class="string">'vue-loader/lib/plugin'</span>)</span><br><span class="line"></span><br><span class="line">plugins: [</span><br><span class="line">  <span class="keyword">new</span> VueLoaderPlugin()</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>webpack 的配置文件，是导出一个对象的 JavaScript 文件。此对象，由 webpack 根据对象定义的属性进行解析。<br>可以用数组，导出多个配置对象。</p><h3 id="构建目标"><a href="#构建目标" class="headerlink" title="构建目标"></a>构建目标</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">target: <span class="string">'node'</span></span><br><span class="line"><span class="comment">// 默认值为 web</span></span><br><span class="line"><span class="comment">// 使用 node webpack 会编译为用于「类 Node.js」环境（使用 Node.js 的 require ，而不是使用任意内置模块（如 fs 或 path）来加载 chunk）。</span></span><br></pre></td></tr></table></figure><h3 id="项目实践"><a href="#项目实践" class="headerlink" title="项目实践"></a>项目实践</h3><p>从零开始，搭建一个最简单的vue项目。虽然现在有各种脚手架为我们定制了完美的方案，但是总有一种摸不到深层的不安全感，亲自深入了解一下，可以对自己所做的事情有更多的掌控，这种感觉才是美好滴。</p><p>步骤：</p><ol><li><p>创建项目文件夹</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir test-pack &amp;&amp; cd test-pack</span><br></pre></td></tr></table></figure></li><li><p>初始化，生成package.json</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init</span><br></pre></td></tr></table></figure></li><li><p>安装依赖项</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm install webpack webpack-cli webpack-dev-server --save-dev</span><br><span class="line">npm install clean-webpack-plugin html-webpack-plugin webpack-merge --save-dev</span><br><span class="line">npm install vue --save</span><br><span class="line">npm install vue-loader vue-template-compiler --save-dev</span><br><span class="line">npm install style-loader css-loader --save-dev</span><br></pre></td></tr></table></figure></li></ol><p>安装完成后，各依赖项如下：<br><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"devDependencies"</span>: &#123;</span><br><span class="line">  <span class="string">"clean-webpack-plugin"</span>: <span class="string">"^2.0.1"</span>, <span class="comment">// build之前先清空dist目录</span></span><br><span class="line">  <span class="string">"css-loader"</span>: <span class="string">"^2.1.1"</span>,</span><br><span class="line">  <span class="string">"html-webpack-plugin"</span>: <span class="string">"^3.2.0"</span>, <span class="comment">// 自动管理输出的index.html文件</span></span><br><span class="line">  <span class="string">"style-loader"</span>: <span class="string">"^0.23.1"</span>,</span><br><span class="line">  <span class="string">"vue-loader"</span>: <span class="string">"^15.7.0"</span>,</span><br><span class="line">  <span class="string">"vue-template-compiler"</span>: <span class="string">"^2.6.10"</span>,</span><br><span class="line">  <span class="string">"webpack"</span>: <span class="string">"^4.29.6"</span>,</span><br><span class="line">  <span class="string">"webpack-cli"</span>: <span class="string">"^3.3.0"</span>,</span><br><span class="line">  <span class="string">"webpack-dev-server"</span>: <span class="string">"^3.3.0"</span>,</span><br><span class="line">  <span class="string">"webpack-merge"</span>: <span class="string">"^4.2.1"</span> <span class="comment">// 处理通用配置</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">"dependencies"</span>: &#123;</span><br><span class="line">  <span class="string">"vue"</span>: <span class="string">"^2.6.10"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ol start="4"><li><p>组织文件结构</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"test-pack"</span>: &#123;</span><br><span class="line">  <span class="string">"node_modules"</span></span><br><span class="line">  <span class="string">"dist"</span></span><br><span class="line">  <span class="string">"config"</span>: &#123;</span><br><span class="line">    <span class="string">"webpack.base.js"</span></span><br><span class="line">    <span class="string">"webpack.dev.js"</span></span><br><span class="line">    <span class="string">"webpack.prod.js"</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="string">"src"</span>: &#123;</span><br><span class="line">    <span class="string">"components"</span>: &#123;</span><br><span class="line">      <span class="string">"app.vue"</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="string">"index.js"</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="string">"package.json"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>app.vue</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"test"</span>&gt;</span>&#123;&#123;text&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined">  data() &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">      text: <span class="string">'测试'</span></span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">.test &#123;</span></span><br><span class="line"><span class="undefined">  color: red;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>index.js</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./components/app.vue'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> root = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>)</span><br><span class="line"><span class="built_in">document</span>.body.appendChild(root)</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  render:<span class="function">(<span class="params">h</span>) =&gt;</span> h(App)</span><br><span class="line">&#125;).$mount(root)</span><br></pre></td></tr></table></figure></li><li><p>在webpack.base.js中书写通用配置</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="keyword">const</span> VueLoaderPlugin = <span class="built_in">require</span>(<span class="string">'vue-loader/lib/plugin'</span>)</span><br><span class="line"><span class="keyword">const</span> HTMLPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: path.join(__dirname, <span class="string">'../src/index.js'</span>),</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: <span class="string">'[name].[chunkhash].js'</span>, <span class="comment">// hash值确保浏览器拿取最新文件</span></span><br><span class="line">    path: path.join(__dirname, <span class="string">'../dist'</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.vue$/</span>,</span><br><span class="line">        loader: <span class="string">'vue-loader'</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">        use: [</span><br><span class="line">          <span class="string">'style-loader'</span>,</span><br><span class="line">          <span class="string">'css-loader'</span></span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> VueLoaderPlugin(),</span><br><span class="line">    <span class="keyword">new</span> HTMLPlugin(&#123;<span class="attr">title</span>: <span class="string">'测试'</span>&#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在webpack.dev.js中书写开发环境的配置，让代码在本地跑起来</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> merge = <span class="built_in">require</span>(<span class="string">'webpack-merge'</span>)</span><br><span class="line"><span class="keyword">const</span> base = <span class="built_in">require</span>(<span class="string">'./webpack.base'</span>)</span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = merge(base, &#123;</span><br><span class="line">  mode: <span class="string">'development'</span>,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> webpack.HotModuleReplacementPlugin(),</span><br><span class="line">    <span class="keyword">new</span> webpack.NoEmitOnErrorsPlugin()</span><br><span class="line">  ],</span><br><span class="line">  devServer: &#123;</span><br><span class="line">    port: <span class="number">8000</span>,</span><br><span class="line">    host: <span class="string">'0.0.0.0'</span>,</span><br><span class="line">    hot: <span class="literal">true</span>,</span><br><span class="line">    overlay: &#123;</span><br><span class="line">      error: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>在package.json中添加运行本地服务的脚本命令</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line">  <span class="string">"dev"</span>: <span class="string">"webpack-dev-server --config config/webpack.dev.js"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>此时，运行npm run dev，可在本地跑起来，并支持热更新</p><ol start="10"><li><p>在webpack.build.js中书写生产环境的打包配置</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> merge = <span class="built_in">require</span>(<span class="string">'webpack-merge'</span>)</span><br><span class="line"><span class="keyword">const</span> base = <span class="built_in">require</span>(<span class="string">'./webpack.base'</span>)</span><br><span class="line"><span class="keyword">const</span> CleanWebpackPlugin = <span class="built_in">require</span>(<span class="string">'clean-webpack-plugin'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = merge(base, &#123;</span><br><span class="line">  mode: <span class="string">'production'</span>,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> CleanWebpackPlugin()</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>在package.json中添加打包的脚本命令</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line">  <span class="string">"dev"</span>: <span class="string">"webpack-dev-server --config config/webpack.dev.js"</span>,</span><br><span class="line">  <span class="string">"build"</span>: <span class="string">"webpack --config config/webpack.prod.js"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>此时，运行 npm run build，可以看到文件被打包为bundle.js放在dist目录下，同时自动生成index.html，点击运行index.html可以看到网页跟本地运行一样的效果</p><ol start="12"><li>由于添加了<a href="https://github.com/jaketrent/html-webpack-template" target="_blank" rel="noopener">html-webpack-plugin</a>插件，在dist目录下自动生成了index.html  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>测试<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"main.40cda2cd05192f9fc326.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><p>打开index.html可以查看效果</p><p>至此，一个最简单的从零搭建项目的流程就走完了，后续可以添加更多东西以使项目变得更加完美。</p><h3 id="tips"><a href="#tips" class="headerlink" title="tips"></a>tips</h3><p>在配置时，有很多详细的参数，可以到<a href="https://www.webpackjs.com/configuration/" target="_blank" rel="noopener">配置</a>查询<br>具体使用<a href="https://www.webpackjs.com/guides/" target="_blank" rel="noopener">指南</a></p><ol><li>通过安装依赖，可以使用不同的语言来书写配置文件，如typeScript/coffeeScript/jsx/babel等</li><li>除了导出单个配置对象，还可以导出一个函数、Promise、多个对象</li><li>entry 简单规则：每个 HTML 页面都有一个入口起点，单页应用(SPA)：一个入口起点，多页应用(MPA)：多个入口起点</li><li>错误处理机制</li><li>loader 总是从右到左地被调用（loader的调用很有讲究，可以抽空研究）</li><li>模块方法：ES6/CommonJS/AMD</li><li>编写一个<a href="https://www.webpackjs.com/contribute/writing-a-plugin/" target="_blank" rel="noopener">插件</a></li><li>package.json里面移除”main”: “index.js”，添加”private”: true，防止意外发布代码</li><li>图片等静态资源可以统一放到一个公共的地方，不过为了方便引入，可以使用alias修改路径</li><li>Manifest可以对“模块映射到输出 bundle 的过程”进行追踪</li><li>通常为不同的环境编写不同的配置，可以用 webpack-merge 处理通用配置，不必重复代码</li><li>建议在生产环境中使用 uglifyjs-webpack-plugin 和 inline-source-map</li><li>CommonsChunkPlugin 提取公共 bundle ，防止代码重复</li><li>webpack-chart 等 bundle 分析工具</li><li>离线<a href="https://www.webpackjs.com/guides/progressive-web-application/" target="_blank" rel="noopener">PWA/workBox</a></li><li>使用环境变量NODE_ENV</li><li>webpack 可以跟其它工具集成</li><li><a href="https://www.webpackjs.com/loaders/" target="_blank" rel="noopener">loaders</a></li><li><a href="https://www.webpackjs.com/plugins/" target="_blank" rel="noopener">plugins</a></li></ol><h3 id="一点感悟"><a href="#一点感悟" class="headerlink" title="一点感悟"></a>一点感悟</h3><ol><li>工作中做项目时，前辈们早已搭好环境，抑或网上早有官方出品的各种“完美”脚手架，但是只有亲自研究一番，才拥有真正属于自己一份信心与豁然；</li><li>日常工作每天都有接触，照理说随便花点时间看看资料就明白了，但是一旦开始一个新的目标，我喜欢把它吃透一点，生怕错过什么了不得的风景。事实证明，我的想法是对的。刚开始只花了几个小时就能自己搭建一个环境出来，本来满心欢喜地准备收工，但心里总不踏实，于是耐着性子把官方所有文档都看了一遍，再从网上找了视频来看。在看文档的过程中，才发现自己最先搭的环境很粗糙，后来添加了 html-webpack-plugin 来自动生成index.html文件，添加了 clean-webpack-plugin 来清理dist目录，添加了 webpack-merge 来处理重复代码……这样，项目才一步一步变成自己喜欢的样子。在看视频的时候，也是发现了些新大陆，比如，node_modules 目录下的 .bin 放的是可执行文件，直接点击里面的文件，可以实现点击应用程序图标的效果，虽然这些不是什么了不得的东西，但是，重新拾起这些被忽略的点，也是很酷的呀。</li></ol>]]></content>
    
    <summary type="html">
    
      webpack的一些概念及一个简单的项目实践步骤
    
    </summary>
    
    
      <category term="utils" scheme="https://miaoq.github.io/tags/utils/"/>
    
  </entry>
  
  <entry>
    <title>支持PWA功能</title>
    <link href="https://miaoq.github.io/2018/07/24/projects-2018-07-24-%E4%B8%BA%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0PWA%E5%8A%9F%E8%83%BD/"/>
    <id>https://miaoq.github.io/2018/07/24/projects-2018-07-24-为博客添加PWA功能/</id>
    <published>2018-07-24T06:04:42.000Z</published>
    <updated>2019-04-09T08:53:54.961Z</updated>
    
    <content type="html"><![CDATA[<h3 id="PWA可以做什么？"><a href="#PWA可以做什么？" class="headerlink" title="PWA可以做什么？"></a>PWA可以做什么？</h3><p>一个PWA应用首先是一个网页，可以通过Web技术编写出一个网页应用，随后添加上App Manifest和Service Worker来实现PWA的安装和离线等功能。</p><ul><li>可以添加至主屏幕，点击主屏幕图标可以实现启动动画以及隐藏地址栏</li><li>实现离线缓存功能，即使用户手机没有网络，依然可以使用一些离线功能</li><li>实现了消息推送</li></ul><p>看了PWA的功能是不是激动不已，网页也可以像app一样使用了！</p><h3 id="如何部署？"><a href="#如何部署？" class="headerlink" title="如何部署？"></a>如何部署？</h3><p>虽然PWA技术是在2016年6月才推广的项目，但是网上已经有很多介绍其原理以及如何应用的文章，这里不再赘述，仅仅记录一下如何将其简单部署到该博客上。</p><p>将项目变成一个简单的PWA应用，分为三步：</p><ol><li><p>在index.html中<code>&lt;head&gt;</code>中添加<code>&lt;link rel=&quot;manifest&quot; href=&quot;/manifest.json&quot;&gt;</code>，<br>在<code>&lt;body&gt;</code>中添加：  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">if</span>(navigator.serviceWorker != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="built_in">window</span>.addEventListener(<span class="string">'DOMContentLoaded'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 执行注册</span></span><br><span class="line">            navigator.serviceWorker.register(<span class="string">'/service-worker.js'</span>)</span><br><span class="line">            .then(<span class="function"><span class="keyword">function</span>(<span class="params">registration</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">            &#125;).catch(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">            <span class="comment">// Eat it!</span></span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>添加<code>manifest.json</code>文件，以及合适像素的图片作为应用的图标</p></li><li>添加<code>service-worker.js</code>文件</li></ol>]]></content>
    
    <summary type="html">
    
      PWA是一个渐进式的网页应用程序，可离线使用网站，实现一个类似app的效果。
    
    </summary>
    
    
      <category term="projects" scheme="https://miaoq.github.io/tags/projects/"/>
    
  </entry>
  
  <entry>
    <title>Canvas</title>
    <link href="https://miaoq.github.io/2018/07/17/HTML-2018-07-17-Canvas/"/>
    <id>https://miaoq.github.io/2018/07/17/HTML-2018-07-17-Canvas/</id>
    <published>2018-07-17T02:33:38.000Z</published>
    <updated>2019-04-09T08:53:54.959Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-基础知识"><a href="#1-基础知识" class="headerlink" title="1. 基础知识"></a>1. 基础知识</h3><p>canvas元素的大小应该直接在元素里面设置（默认值是300*150），不要用css来控制：<br>canvas实际上有两套尺寸，一是元素本身的大小，二是元素绘图表面的大小。用元素属性设置width和height时，同时修改了两套尺寸。而用css修改时，只会改变元素本身的大小，当两者大小不一致时，浏览器会对绘图表面进行缩放，比例就不对了。</p><p>在设置canvas的宽高时，不能使用”px”后缀，虽然浏览器还是支持的，但是Canvas规范不接受。</p><p>Chrome Developer Tools<br>以编程的方式来启动和停止性能分析（在执行某几行代码时进行分析）：<br>console.profile() console.profileEnd()</p><p>性能分析：<a href="https://jsperf.com/" target="_blank" rel="noopener">https://jsperf.com/</a></p><p>事件处理：将鼠标坐标转换为canvas坐标</p><p>让浏览器不再干预canvas的事件处理：preventDefault()</p><p>任何放入canvas元素主体部分的东西，只有浏览器在不支持canvas元素时，才会被显示出来。所以，要让html元素“嵌入”canvas中，采用css定位实现：<br>一、css中规定：采用绝对定位方式的元素将被绘制在采用相对定位方式的元素之上。所以，对canvas采用相对，对html采用绝对；<br>二、两个元素都采用相对或绝对，把html放置到canvas之后<br>三、两个元素都采用相对或绝对，添加z-index</p><p>canvas并不是图像，要想让用户实现向右击鼠标保存图片的效果，使用canvas的toDataURL()方法，可抓取canvas的快照<br>toDataURL()方法所返回的引用，指向了某个给定canvas元素的数据地址，可以将img元素的src属性设置为这个数据地址，就可以创建一幅表示canvas的图像了</p><h3 id="2-绘制"><a href="#2-绘制" class="headerlink" title="2. 绘制"></a>2. 绘制</h3><p>橡皮筋技术</p><p>填充路径时使用“非零环绕规则”（剪纸效果）：<br>从需要判断的区域出发，画一条足够长的线段（穿过该方向上的所有边），与边相交的地方计数，与顺时针相交，加一，与逆时针相交，减一。最终值是0，不填充，否则，填充。</p><p>在一个整像素的范围内绘制半个像素宽的线段是不可能的，所以版左右（上下）两个方向上的半像素都被扩展为一个像素。这样，在某两个像素的边界处绘制一条1像素宽的线段，那么该线段实际会占据2个像素的宽度。所以，取像素的.5的地方（一个整像素的中心点）开始绘制，才能绘出一个像素宽的线段。</p><p>线段的绘制：<br><code>beginPath()</code>（清除当前路径中的所有子路径，开始一段新的路径）、<code>moveTo()</code>（该方法会向当前路径中加入一条仅包含一个点的子路径）、<code>lineTo()</code>、<code>stroke()</code></p><p>很多时候在需要对图形就行平移、缩放、旋转的变换时，换个角度思考：变换坐标系会更加方便（<code>rotate()</code> <code>scale()</code> <code>translate()</code>）。<br><code>scale(-1, 1)</code>可以绘制水平镜像<br>更强大的变换：<code>transform()</code> <code>setTransform()</code></p><p>图像合成（叠加，有好几种模式）：如何将一个图形绘制到另一个图形之上</p><p>剪辑区域：是在canvas中由路径定义的一块区域，浏览器会将所有的绘图操作都限制在本区域内执行，默认情况下，剪辑区域的大小与canvas一致。（利用该技术可以实现很多效果：橡皮擦、伸缩式动画…）</p><h3 id="3-文本"><a href="#3-文本" class="headerlink" title="3. 文本"></a>3. 文本</h3><p>像绘制图像一样，在对文本进行填充及描边操作时，除了使用纯色，还可以使用图案及渐变色</p><p>绘图环境对象的font属性也支持css3格式的字型语法，除了css特有的inherit和initial（设为这两个值，会悄无声息地失败）。设置line-height时会被忽略，canvas规定必须设置为normal</p><p>文本定位：textAlign（水平） textBaseline（垂直）</p><p>文本的度量：<code>measureText()</code>可以度量某个字符串的像素宽度（需要先设置好字型）</p><h3 id="4-图像与视频"><a href="#4-图像与视频" class="headerlink" title="4. 图像与视频"></a>4. 图像与视频</h3><p>可以选择绘制某幅图的全部或部分，可以在绘制的时候缩放或保持原样，可以将图片绘制在canvas中的任何地方，也可以操作每个像素的颜色和透明度</p>]]></content>
    
    <summary type="html">
    
      简单罗列了canvas的一些需要注意的细节点（推荐库：d3.js）。
    
    </summary>
    
    
      <category term="HTML" scheme="https://miaoq.github.io/tags/HTML/"/>
    
  </entry>
  
  <entry>
    <title>MongoDB</title>
    <link href="https://miaoq.github.io/2018/06/24/DB-2018-06-24-MongoDB/"/>
    <id>https://miaoq.github.io/2018/06/24/DB-2018-06-24-MongoDB/</id>
    <published>2018-06-24T10:40:00.000Z</published>
    <updated>2019-04-09T08:53:54.959Z</updated>
    
    <content type="html"><![CDATA[<h3 id="概念解析"><a href="#概念解析" class="headerlink" title="概念解析"></a>概念解析</h3><table><thead><tr><th>SQL术语/概念</th><th>MongoDB术语/概念</th><th>解释/说明</th></tr></thead><tbody><tr><td>database</td><td>database</td><td>数据库</td></tr><tr><td>table</td><td>collection</td><td>数据库表/集合</td></tr><tr><td>row</td><td>document</td><td>数据记录行/文档</td></tr><tr><td>column</td><td>field</td><td>数据字段/域</td></tr><tr><td>index</td><td>index</td><td>索引</td></tr><tr><td>table.joins()</td><td></td><td>表连接，MongoDB不支持</td></tr><tr><td>primary key</td><td>primary key</td><td>主键，MongoDB自动将_id字段设置为主键</td></tr></tbody></table><hr><h3 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h3><p><strong>数据库</strong><br>有一些数据库名是保留的，可以直接访问这些有特殊作用的数据库：</p><ul><li><code>admin</code>：从权限的角度来看，这是”root”数据库。要是将一个用户添加到这个数据库，这个用户自动继承所有数据库的权限。一些特定的服务器端命令也只能从这个数据库运行，比如列出所有的数据库或者关闭服务器。</li><li><code>local</code>: 这个数据永远不会被复制，可以用来存储限于本地单台服务器的任意集合</li><li><code>config</code>: 当Mongo用于分片设置时，config数据库在内部使用，用于保存分片的相关信息。</li></ul><p><strong>文档</strong><br>文档是一组键值(key-value)对(即BSON)。MongoDB 的文档不需要设置相同的字段，并且相同的字段不需要相同的数据类型，这与关系型数据库有很大的区别，也是 MongoDB 非常突出的特点。</p><ul><li>文档中的键/值对是有序</li><li>文档中的值不仅可以是在双引号里面的字符串，还可以是其他几种数据类型（甚至可以是整个嵌入的文档)</li><li>不能有重复的键</li><li>文档的键是字符串</li><li>以下划线”_”开头的键是保留的(不是严格要求的)</li></ul><p><strong>集合</strong><br>集合就是 MongoDB 文档组，类似于关系数据库管理系统中的表格，集合存在于数据库中，集合没有固定的结构</p><ul><li>集合名不能以”system.”开头</li><li>不要在名字里出现$</li></ul><p><strong>元数据</strong><br>ObjectId 类似唯一主键，前4个字节是时间戳，_id键的值默认是个 ObjectId 对象，<code>ObjectId().getTimestamp()</code>可获取文档的创建时间</p><hr><h3 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h3><p>以管理员身份打开控制台，输入mongo进入命令控制台:</p><p>显示：</p><ul><li><code>show dbs</code>显示所有数据库的列表</li><li><code>db</code>显示当前数据库对象或集合</li><li><code>show collections</code>查看已有集合</li><li><code>show tables</code>显示当前数据库下的所有集合</li><li><code>use + dbName</code>切换到指定数据库（如果数据库不存在，则创建数据库）</li></ul><p>删除：</p><ul><li><code>db.dropDatabase()</code>删除当前数据库</li><li><code>db.collectionName.drop()</code>删除整个collection</li></ul><p>创建：</p><ul><li><code>db.createCollection(name, options)</code>创建集合</li><li><code>db.collectionName.insert(document)</code>插入文档</li><li><code>db.collectionName.save(document)</code>不指定 _id 字段跟insert一样，指定 _id 字段，则会更新该 _id 的数据</li><li><code>db.collectionName.update({query}, {update}, {options})</code>更新文档</li><li><code>db.collectionName.remove({query}, {options})</code>删除文档</li></ul><p>查找：</p><ul><li><code>db.collectionName.find({query}, projection)</code>query中AND直接以逗号分隔key：<code>{key1:value1, key2:value2}</code>，OR则使用<code>{$or: [{key1: value1}, {key2:value2}]}</code>，AND和OR可组合使用</li><li><code>db.collectionName.find().limit(num)</code>指定读取的条数</li><li><code>db.collectionName.find().skip(num)</code>指定跳过的条数</li><li><code>db.collectionName.find().sort({key: 1})</code>对指定的key排序（升序1，降序-1）</li></ul><p>其它方法：</p><ul><li><code>db.collectionName.createIndex(keys, options)</code>创建索引</li><li><code>db.collectionName.aggregate(options)</code>聚合方法，计算某个字段的总和、平均值等<a href="http://www.runoob.com/mongodb/mongodb-aggregate.html" target="_blank" rel="noopener">http://www.runoob.com/mongodb/mongodb-aggregate.html</a></li></ul><hr><h3 id="其它操作"><a href="#其它操作" class="headerlink" title="其它操作"></a>其它操作</h3><p><strong>条件操作符</strong><br>条件|操作符<br>–|–<br>大于|$gt<br>小于|$lt<br>大于等于|$gte<br>小于等于|$lte</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">db.col.find(&#123;<span class="attr">likes</span> : &#123;<span class="attr">$gte</span> : <span class="number">100</span>&#125;&#125;)</span><br><span class="line"><span class="comment">//获取"col"集合中 "likes" 大于等于 100 的数据</span></span><br></pre></td></tr></table></figure><p><code>$type</code>操作符是基于BSON类型来检索集合中匹配的数据类型，并返回结果。<br><a href="http://www.runoob.com/mongodb/mongodb-operators-type.html" target="_blank" rel="noopener">http://www.runoob.com/mongodb/mongodb-operators-type.html</a></p><p><strong>管道的概念</strong><br><a href="http://www.runoob.com/mongodb/mongodb-aggregate.html" target="_blank" rel="noopener">http://www.runoob.com/mongodb/mongodb-aggregate.html</a><br>管道在Unix和Linux中一般用于将当前命令的输出结果作为下一个命令的参数。<br>MongoDB的聚合管道将MongoDB文档在一个管道处理完毕后将结果传递给下一个管道处理。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">db.articles.aggregate([</span><br><span class="line">    &#123; <span class="attr">$match</span> : &#123; <span class="attr">score</span> : &#123; <span class="attr">$gt</span> : <span class="number">70</span>, <span class="attr">$lte</span> : <span class="number">90</span> &#125; &#125; &#125;,</span><br><span class="line">    &#123; <span class="attr">$group</span>: &#123; <span class="attr">_id</span>: <span class="literal">null</span>, <span class="attr">count</span>: &#123; <span class="attr">$sum</span>: <span class="number">1</span> &#125; &#125; &#125;</span><br><span class="line">]);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">$match用于获取分数大于70小于或等于90记录，</span></span><br><span class="line"><span class="comment">然后将符合条件的记录送到下一阶段$group管道操作符进行处理</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p><strong>MongoDB 复制（副本集）</strong><br>MongoDB复制是将数据同步在多个服务器的过程。复制提供了数据的冗余备份，并在多个服务器上存储数据副本，提高了数据的可用性， 并可以保证数据的安全性。复制还允许您从硬件故障和服务中断中恢复数据。</p><p><strong>MongoDB 分片</strong><br>在Mongodb里面存在另一种集群，就是分片技术,可以满足MongoDB数据量大量增长的需求。当MongoDB存储海量的数据时，一台机器可能不足以存储数据，也可能不足以提供可接受的读写吞吐量。这时，我们就可以通过在多台机器上分割数据，使得数据库系统能存储和处理更多的数据。</p><p><strong>MongoDB 备份(mongodump)与恢复(mongorestore)</strong><br>备份数据命令<code>mongodump</code><br>恢复数据命令<code>mongorestore</code></p><p><strong>MongoDB 监控</strong><br>在你已经安装部署并允许MongoDB服务后，你必须要了解MongoDB的运行情况，并查看MongoDB的性能。这样在大流量得情况下可以很好的应对并保证MongoDB正常运作。<br>进入安装MongoDB目录下的bin目录使用命令：<br><code>mongostat</code>间隔固定时间获取mongodb的当前运行状态，并输出<br><code>mongotop &lt;options&gt;</code>跟踪一个MongoDB的实例，查看哪些大量的时间花费在读取和写入数据</p><hr><h3 id="连接数据库"><a href="#连接数据库" class="headerlink" title="连接数据库"></a>连接数据库</h3><p><code>java</code>：<a href="http://www.runoob.com/mongodb/mongodb-java.html" target="_blank" rel="noopener">http://www.runoob.com/mongodb/mongodb-java.html</a><br><code>PHP</code>：<a href="http://www.runoob.com/mongodb/mongodb-php.html" target="_blank" rel="noopener">http://www.runoob.com/mongodb/mongodb-php.html</a><br><code>Node.js</code>：<a href="http://www.runoob.com/nodejs/nodejs-mongodb.html" target="_blank" rel="noopener">http://www.runoob.com/nodejs/nodejs-mongodb.html</a></p><hr><h3 id="深入"><a href="#深入" class="headerlink" title="深入"></a>深入</h3><p><strong>MongoDB 关系</strong><br>嵌入式关系：数据保存在单一的文档中，容易获取和维护，但读写性能差<br>引用式关系：数据保存在不同的文档中，结构清晰</p><p><strong>MongoDB 数据库引用</strong><br>使用 DBRefs，可以让一个文档从多个集合中引用文档。</p><p><strong>MongoDB 覆盖索引查询</strong><br>尽量使用索引查询，从索引中获取数据比通过扫描文档读取数据要快得多，数据量大的时候，效果更明显。</p><p><strong>MongoDB 查询分析</strong><br><code>explain()</code> 操作提供了查询信息，使用索引及查询统计等,有利于我们对索引的优化<br><code>hint()</code>可强制 MongoDB 使用一个指定的索引</p><p><strong>MongoDB 原子操作</strong><br>mongodb不支持事务，所以，在你的项目中应用时，要注意这点。无论什么设计，都不要要求mongodb保证数据的完整性。<br>但是mongodb提供了许多原子操作，比如文档的保存，修改，删除等，都是原子操作。所谓原子操作就是要么这个文档保存到Mongodb，要么没有保存到Mongodb，不会出现查询到的文档没有保存完整的情况。</p><p><strong>MongoDB 高级索引</strong><br><a href="http://www.runoob.com/mongodb/mongodb-advanced-indexing.html" target="_blank" rel="noopener">http://www.runoob.com/mongodb/mongodb-advanced-indexing.html</a><br>索引数组<br>索引子文档  </p><p><strong>MongoDB 索引限制</strong><br><a href="http://www.runoob.com/mongodb/mongodb-indexing-limitations.html" target="_blank" rel="noopener">http://www.runoob.com/mongodb/mongodb-indexing-limitations.html</a><br>使用索引有一些限制条件</p><p><strong>MongoDB ObjectId</strong><br><code>ObjectId()</code> 中存储了4个字节的时间戳，所以你不需要为你的文档保存时间戳字段，可以通过 getTimestamp 函数来获取文档的创建时间。</p><p><strong>MongoDB Map Reduce</strong><br>Map-Reduce是一种计算模型，简单的说就是将大批量的工作（数据）分解（MAP）执行，然后再将结果合并成最终结果（REDUCE）。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">db.collection.mapReduce(</span><br><span class="line">   <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;emit(key,value);&#125;,  <span class="comment">//map 函数</span></span><br><span class="line">   <span class="function"><span class="keyword">function</span>(<span class="params">key,values</span>) </span>&#123;<span class="keyword">return</span> reduceFunction&#125;,   <span class="comment">//reduce 函数</span></span><br><span class="line">   &#123;</span><br><span class="line">      out: collection,</span><br><span class="line">      query: <span class="built_in">document</span>,</span><br><span class="line">      sort: <span class="built_in">document</span>,</span><br><span class="line">      limit: number</span><br><span class="line">   &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p><strong>MongoDB 全文检索</strong><br><a href="http://www.runoob.com/mongodb/mongodb-text-search.html" target="_blank" rel="noopener">http://www.runoob.com/mongodb/mongodb-text-search.html</a><br>全文检索对每一个词建立一个索引，指明该词在文章中出现的次数和位置，当用户查询时，检索程序就根据事先建立的索引进行查找，并将查找的结果反馈给用户的检索方式。</p><p><strong>MongoDB 正则表达式</strong><br>MongoDB使用<code>$regex</code>操作符来设置匹配字符串的正则表达式。</p><p><strong>MongoDB 管理工具: Rockmongo</strong><br>RockMongo是PHP5写的一个MongoDB管理工具。</p><p><strong>MongoDB GridFS</strong><br><a href="http://www.runoob.com/mongodb/mongodb-gridfs.html" target="_blank" rel="noopener">http://www.runoob.com/mongodb/mongodb-gridfs.html</a><br>GridFS 用于存储和恢复那些超过16M（BSON文件限制）的文件(如：图片、音频、视频等)。<br>GridFS 也是文件存储的一种方式，但是它是存储在MonoDB的集合中。<br>GridFS 可以更好的存储大于16M的文件。<br>GridFS 会将大文件对象分割成多个小的chunk(文件片段),一般为256k/个,每个chunk将作为MongoDB的一个文档(document)被存储在chunks集合中。<br>GridFS 用两个集合来存储一个文件：fs.files与fs.chunks。<br>每个文件的实际内容被存在chunks(二进制数据)中,和文件有关的meta数据(filename,content_type,还有用户自定义的属性)将会被存在files集合中。  </p><p><strong>MongoDB 固定集合（Capped Collections）</strong><br><a href="http://www.runoob.com/mongodb/mongodb-capped-collections.html" target="_blank" rel="noopener">http://www.runoob.com/mongodb/mongodb-capped-collections.html</a><br>MongoDB 固定集合（Capped Collections）是性能出色且有着固定大小的集合，对于大小固定，我们可以想象其就像一个环形队列，当集合空间用完后，再插入的元素就会覆盖最初始的头部的元素。  </p><p><strong>MongoDB 自动增长</strong><br>MongoDB 没有像 SQL 一样有自动增长的功能，可以通过编程的方式实现。</p>]]></content>
    
    <summary type="html">
    
      MongoDB 将数据存储为一个文档，数据结构由键值(key=&gt;value)对组成。MongoDB 文档类似于 JSON 对象。字段值可以包含其他文档，数组及文档数组。
    
    </summary>
    
    
      <category term="DB" scheme="https://miaoq.github.io/tags/DB/"/>
    
  </entry>
  
  <entry>
    <title>心情墙项目</title>
    <link href="https://miaoq.github.io/2018/06/20/projects-2018-06-20-%E5%BF%83%E6%83%85%E5%A2%99%E9%A1%B9%E7%9B%AE/"/>
    <id>https://miaoq.github.io/2018/06/20/projects-2018-06-20-心情墙项目/</id>
    <published>2018-06-20T11:32:21.000Z</published>
    <updated>2019-04-09T08:53:54.960Z</updated>
    
    <content type="html"><![CDATA[<p>项目地址：<a href="https://github.com/MiaoQ/react-app-1" target="_blank" rel="noopener">https://github.com/MiaoQ/react-app-1</a></p><h3 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h3><p>最近学习了时下前端较为火热的MVVM框架React，于是心痒痒的想要做个东西出来。焦急又焦急，不知道做个什么东西出来比较好，搜了搜别人都在做什么，还是没灵感（其实我特别想做一个微博那样的东东，但是觉得后台好可怕，数据库好复杂…暂时搁置）。实在想不到了，就学别人做个记事本吧，搜到一个做记事本的项目，用IndexedDB存储数据，还好，还在前端范畴，开始动手。</p><p>大框架搭了一点点，越看越不顺眼，做个记事本感觉一点也不好玩，InddexedDB也不怎么好管理，于是造型开始往微博的样子在变化，数据库也由mongoDB代替…折折腾腾十几天，终于收获战果，大大的满足。</p><p>罗里吧嗦这么多，其实就想谈谈我的两点最大的感触：<br>一、自己喜欢的才是最好的，刚开始做的记事本排版和逻辑都不是我想要的，越做越难受，不仅没动力，还有嚼蜡的感觉；<br>二、不要无限扩大对未知事物的畏惧，渡过开头的难关，柳暗花明又是一村。</p><hr><h3 id="大致过程"><a href="#大致过程" class="headerlink" title="大致过程"></a>大致过程</h3><p>一、使用create-react-app来构建React环境。</p><p>二、一个完整的应用大致需要三个部分：视图呈现 + 数据交互 + 数据处理  </p><p><strong>视图呈现</strong><br>先在脑海中设计好自己想要的界面结构，再将构图拆分成一个个组件，在写每一个组件的时候要清楚的知道数据的流动。在需要数据交互的地方，先用静态数据填充，并留好api。</p><p><strong>数据交互</strong><br>数据交互就是前台与后台的数据传递，首先想到ajax，对于我个人来说，非常不喜欢使用原生的XMLHttpRequest来写，之前写了几次结构都有点乱。然后想到jQuery，但是很多人也不建议在React中使用。再继续搜，选定了fetch。</p><p>自己写项目，肯定自己要用得顺手，最不喜欢每次用个东西都跑过去复制，于是开始封装fetch，封装成了自己能记住的样子。</p><p><strong>数据处理</strong><br>引用Node.js的Express模块搭建一个简单的server，处理来自前台的请求，对数据库进行操作。</p><p>Node.js提供了操作MongoDB的方法，连接数据库，再次封装成自己喜欢的方式。</p><hr><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>本项目从前端页面呈现到后台服务器搭建以及数据库操作，全都使用js搞定，是前端工程师的一大福音。</p><p>在完成每一部分的时候都要有模块化的思想，server、数据库的操作、fetch方法的封装、React组件的构建…当项目从记事本的样子变成微博的样子，只需移除那些不想要的组件，是非常有魅力的一件事。</p><p>有些灵感会在项目进行中一点点迸发出来，比如功能的扩展，处理数据的方式，甚至是文件夹的摆放…不要轻易放过它们，一切都会向着更美好的方向前进。</p>]]></content>
    
    <summary type="html">
    
      一个模拟微信朋友圈的项目，可以记录一条条内容。React + Express + MongoDB实现。
    
    </summary>
    
    
      <category term="projects" scheme="https://miaoq.github.io/tags/projects/"/>
    
  </entry>
  
  <entry>
    <title>NodeJs</title>
    <link href="https://miaoq.github.io/2018/06/14/JS-2018-06-14-NodeJs/"/>
    <id>https://miaoq.github.io/2018/06/14/JS-2018-06-14-NodeJs/</id>
    <published>2018-06-14T02:04:02.000Z</published>
    <updated>2019-04-09T08:53:54.960Z</updated>
    
    <content type="html"><![CDATA[<h3 id="开篇"><a href="#开篇" class="headerlink" title="开篇"></a>开篇</h3><p><strong><em>简介</em></strong><br>Node.js是javascript的一个运行环境，使用的语言自然也是javascript。安装之后，可以在控制台直接输入node进入执行环境（也就是直接输入js语句可以执行，退出按两次ctrl + c）。你也可以创建一个js文件，然后在控制台输入node filename.js执行这个文件。</p><p><strong><em>Node.js REPL(交互式解释器)</em></strong>  </p><ul><li>Node REPL 支持输入多行表达式，Node 会自动检测是否为连续的表达式（你只需回车换行即可）</li><li>可以使用下划线(_)获取上一个表达式的运算结果</li></ul><p>REPL 命令:  </p><ul><li>ctrl + c - 退出当前终端。</li><li>ctrl + c 按下两次 - 退出 Node REPL。</li><li>ctrl + d - 退出 Node REPL.</li><li>向上/向下 键 - 查看输入的历史命令</li><li>tab 键 - 列出当前命令</li><li>.help - 列出使用命令</li><li>.break - 退出多行表达式</li><li>.clear - 退出多行表达式</li><li>.save filename - 保存当前的 Node REPL 会话到指定文件</li><li>.load filename - 载入当前 Node REPL 会话的文件内容。</li></ul><p><strong><em>搭建服务器</em></strong><br>Node.js可以直接搭建服务器端，这对于一个对后端语言有深深恐惧感，但又想要拥有能自己控制的server的前端媛来说简直是巨大的福音，因为，可以用js来搭建server了！并且非常简单。看一个例子就知道了：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line">http.createServer(<span class="function"><span class="keyword">function</span>(<span class="params">request, response</span>)</span>&#123;</span><br><span class="line">    response.writeHead(<span class="number">200</span>, &#123;<span class="string">'Content-Type'</span>: <span class="string">'text/plain'</span>&#125;);</span><br><span class="line">    response.end(<span class="string">'Hello World!\n'</span>);</span><br><span class="line">&#125;).listen(<span class="number">8888</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'Server running at http://127.0.0.1:8888/'</span>);</span><br></pre></td></tr></table></figure></p><p><strong><em>NPM</em></strong><br>NPM是随同NodeJS一起安装的包管理工具</p><p>查看所有npm的命令：<br><code>npm help</code></p><p>使用npm安装模块：<br><code>nmp install &lt;moduleName&gt;</code>（本地安装）<br><code>npm install &lt;modulaName&gt; -g</code>（全局安装）</p><p>查看所有全局安装的模块：<br><code>npm list -g</code></p><p>查看某个模块的版本号：<br><code>npm list &lt;moduleName&gt;</code></p><p>卸载模块：<br><code>npm uninstall &lt;moduleName&gt;</code></p><p>卸载后，你可以到 /node_modules/ 目录下查看包是否还存在，或者使用以下命令查看：<br><code>npm ls</code></p><p>更新模块：<br><code>npm update &lt;moduleName&gt;</code></p><p>搜索模块：<br><code>npm search &lt;moduleName&gt;</code></p><p>创建模块：<br>使用 NPM 生成 package.json 文件（以后进阶再仔细研究）</p><p><strong><em>package.json</em></strong><br><code>package.json</code>位于模块的目录下，用于定义包的属性</p><ul><li>name - 包名。</li><li>version - 包的版本号。</li><li>description - 包的描述。</li><li>homepage - 包的官网 url 。</li><li>author - 包的作者姓名。</li><li>contributors - 包的其他贡献者姓名。</li><li>dependencies - 依赖包列表。如果依赖包没有安装，npm 会自动将依赖包安装在 node_module 目录下。</li><li>repository - 包代码存放的地方的类型，可以是 git 或 svn，git 可在 Github 上。</li><li>main - main 字段指定了程序的主入口文件，require(‘moduleName’) 就会加载这个文件。这个字段的默认值是模块根目录下面的 index.js。</li><li>keywords - 关键字</li></ul><hr><h3 id="主要内容"><a href="#主要内容" class="headerlink" title="主要内容"></a>主要内容</h3><p><strong><em>Node.js 回调函数</em></strong><br>回调函数在完成任务后就会被调用，Node 使用了大量的回调函数，Node 所有 API 都支持回调函数</p><p><strong><em>Node.js 事件循环</em></strong><br>在 Node 应用程序中，执行异步操作的函数将回调函数作为最后一个参数，回调函数接收错误对象作为第一个参数</p><p><strong><em>Node.js EventEmitter</em></strong><br>events 模块只提供了一个对象：events.EventEmitter。EventEmitter 的核心就是事件触发与事件监听器功能的封装<br>EventEmitter 对象如果在实例化时发生错误，会触发 error 事件。当添加新的监听器时，newListener 事件会触发，当监听器被移除时，removeListener 事件被触发</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> EventEmitter = <span class="built_in">require</span>(<span class="string">'events'</span>).EventEmitter; </span><br><span class="line"><span class="keyword">var</span> event = <span class="keyword">new</span> EventEmitter(); </span><br><span class="line">event.on(<span class="string">'some_event'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'some_event 事件触发'</span>); </span><br><span class="line">&#125;); </span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">    event.emit(<span class="string">'some_event'</span>); </span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure><p>EventEmitter的属性：<br>addListener on once removeListener removeAllListeners setMaxListeners listeners</p><p>类方法：<br>listenerCount</p><p>事件：<br>newListener removeListener</p><p>EventEmitter 定义了一个特殊的事件 error，它包含了错误的语义，我们在遇到异常的时候通常会触发 error 事件。<br>当 error 被触发时，EventEmitter 规定如果没有响应的监听器，Node.js 会把它当作异常，退出程序并输出错误信息。我们一般要为会触发 error 事件的对象设置监听器，避免遇到错误后整个程序崩溃。</p><p>大多数时候我们不会直接使用 EventEmitter，而是在对象中继承它。包括 fs、net、 http 在内的，只要是支持事件响应的核心模块都是 EventEmitter 的子类。</p><p><strong><em>Node.js Buffer(缓冲区)</em></strong><br>JavaScript 语言自身只有字符串数据类型，没有二进制数据类型。<br>但在处理像TCP流或文件流时，必须使用到二进制数据。因此在 Node.js中，定义了一个 Buffer 类，该类用来创建一个专门存放二进制数据的缓存区。</p><p><strong><em>Node.js Stream(流)</em></strong><br>Stream 是一个抽象接口，Node 中有很多对象实现了这个接口。<br>从流中读数据 将数据写入流<br>管道流 用于从一个流中获取数据并将数据传递到另外一个流中<br>链式流 可以对流进行压缩、解压等处理</p><p><strong><em>Node.js模块系统</em></strong><br>为了让Node.js的文件可以相互调用，Node.js提供了一个简单的模块系统。</p><p>模块是Node.js 应用程序的基本组成部分，文件和模块是一一对应的。换言之，一个 Node.js 文件就是一个模块，这个文件可能是JavaScript代码、JSON或者编译过的C/C++扩展。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建模块 hello.js</span></span><br><span class="line">exports.world = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'hello world'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//或者：</span></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'hello world'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//或者：</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Hello</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'hello world'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">module</span>.exports = Hello;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引用模块 main.js</span></span><br><span class="line"><span class="keyword">var</span> Hello = <span class="built_in">require</span>(<span class="string">'./hello'</span>);<span class="comment">//./表示当前目录，省略了文件名后缀.js</span></span><br><span class="line">hello = <span class="keyword">new</span> Hello();</span><br></pre></td></tr></table></figure><p><strong><em>Node.js 函数</em></strong><br>在JavaScript中，一个函数可以作为另一个函数的参数。我们可以先定义一个函数，然后传递，也可以在传递参数的地方直接定义函数。</p><p><strong><em>Node.js 路由</em></strong><br>通过请求的path name来决定作什么样的response</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//router.js</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">route</span>(<span class="params">pathname</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'About to route a request for '</span> + pathname);</span><br><span class="line">&#125;</span><br><span class="line">exports.route = route;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//server.js</span></span><br><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"><span class="keyword">var</span> url = <span class="built_in">require</span>(<span class="string">'url'</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">start</span>(<span class="params">route</span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">onRequest</span>(<span class="params">request, response</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> pathname = url.parse(request.url).pathname;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Request for '</span> + pathname + <span class="string">' received.'</span>);</span><br><span class="line"></span><br><span class="line">        route(pathname);</span><br><span class="line"></span><br><span class="line">        response.write(<span class="number">200</span>, &#123;<span class="string">'Content-Type'</span>: <span class="string">'text/plain'</span>&#125;);</span><br><span class="line">        response.write(<span class="string">'hello world'</span>);</span><br><span class="line">        response.end();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    http.createServer(onRequest).listen(<span class="number">8888</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Server has started.'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">exports.start = start;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//index.js</span></span><br><span class="line"><span class="keyword">var</span> server = <span class="built_in">require</span>(<span class="string">'./server'</span>);</span><br><span class="line"><span class="keyword">var</span> router = <span class="built_in">require</span>(<span class="string">'./router'</span>);</span><br><span class="line"></span><br><span class="line">server.start(router.route);</span><br></pre></td></tr></table></figure><p><strong><em>Node.js 全局对象</em></strong><br>Node.js 中的全局对象是 global，可以直接访问到 global 的属性，而不需要在应用中包含它</p><ul><li><code>__filename</code> 表示当前正在执行的脚本的文件名，它将输出文件所在位置的绝对路径</li><li><code>__dirname</code> 表示当前执行脚本所在的目录</li><li><code>setTimeout(cb, ms)</code></li><li><code>clearTimeout(t)</code></li><li><code>setInterval(cb, ms)</code></li><li><code>console</code></li><li><code>process</code>用于描述当前Node.js 进程状态的对象</li></ul><table><thead><tr><th>console方法</th><th>描述</th></tr></thead><tbody><tr><td>console.log([data][, …])</td><td>向标准输出流打印字符并以换行符结束（可以加%d那种）</td></tr><tr><td>console.info([data][, …])</td><td>信息性消息（蓝色的惊叹号）</td></tr><tr><td>console.error([data][, …])</td><td>错误消息（红色的叉子）</td></tr><tr><td>console.warn([data][, …])</td><td>警告消息（黄色的惊叹号）</td></tr><tr><td>console.dir(obj[, options])</td><td>用来对一个对象进行检查（inspect），并以易于阅读和打印的格式显示</td></tr><tr><td>console.time(label)</td><td>输出时间，表示计时开始</td></tr><tr><td>console.timeEnd(label)</td><td>结束时间，表示计时结束</td></tr><tr><td>console.trace(message[, …])</td><td>当前执行的代码在堆栈中的调用路径</td></tr><tr><td>console.assert(value[, message][, …])</td><td>用于判断某个表达式或变量是否为真，接收两个参数，第一个参数是表达式，第二个参数是字符串。只有当第一个参数为false，才会输出第二个参数，否则不会有任何结果</td></tr></tbody></table><p><strong><em>Node.js 常用工具</em></strong>  </p><ul><li><code>util.inherits</code>实现对象间原型继承，仅仅继承在原型中定义的函数，构造函数内的不继承</li><li><code>util.inspect</code>将任意对象转换为字符串</li><li><code>util.isArray(object)</code> <code>util.isRegExp(object)</code> <code>util.isDate(object)</code> <code>util.isError(object)</code></li></ul><p><strong><em>Node.js 文件系统</em></strong><br><a href="https://www.runoob.com/nodejs/nodejs-fs.html" target="_blank" rel="noopener">https://www.runoob.com/nodejs/nodejs-fs.html</a></p><p><strong><em>Node.js GET/POST请求</em></strong><br><a href="https://www.runoob.com/nodejs/node-js-get-post.html" target="_blank" rel="noopener">https://www.runoob.com/nodejs/node-js-get-post.html</a></p><p><strong><em>Node.js Web 模块</em></strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建服务端server.js</span></span><br><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">var</span> url = <span class="built_in">require</span>(<span class="string">'url'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建服务器</span></span><br><span class="line">http.createServer( <span class="function"><span class="keyword">function</span> (<span class="params">request, response</span>) </span>&#123;  </span><br><span class="line">   <span class="comment">// 解析请求，包括文件名</span></span><br><span class="line">   <span class="keyword">var</span> pathname = url.parse(request.url).pathname;</span><br><span class="line">   </span><br><span class="line">   <span class="comment">// 输出请求的文件名</span></span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">"Request for "</span> + pathname + <span class="string">" received."</span>);</span><br><span class="line">   </span><br><span class="line">   <span class="comment">// 从文件系统中读取请求的文件内容</span></span><br><span class="line">   fs.readFile(pathname.substr(<span class="number">1</span>), <span class="function"><span class="keyword">function</span> (<span class="params">err, data</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">         <span class="built_in">console</span>.log(err);</span><br><span class="line">         <span class="comment">// HTTP 状态码: 404 : NOT FOUND</span></span><br><span class="line">         <span class="comment">// Content Type: text/plain</span></span><br><span class="line">         response.writeHead(<span class="number">404</span>, &#123;<span class="string">'Content-Type'</span>: <span class="string">'text/html'</span>&#125;);</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;             </span><br><span class="line">         <span class="comment">// HTTP 状态码: 200 : OK</span></span><br><span class="line">         <span class="comment">// Content Type: text/plain</span></span><br><span class="line">         response.writeHead(<span class="number">200</span>, &#123;<span class="string">'Content-Type'</span>: <span class="string">'text/html'</span>&#125;);    </span><br><span class="line">         </span><br><span class="line">         <span class="comment">// 响应文件内容</span></span><br><span class="line">         response.write(data.toString());        </span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//  发送响应数据</span></span><br><span class="line">      response.end();</span><br><span class="line">   &#125;);   </span><br><span class="line">&#125;).listen(<span class="number">8080</span>);</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 控制台会输出以下信息</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'Server running at http://127.0.0.1:8080/'</span>);</span><br></pre></td></tr></table></figure></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建客户端client.js</span></span><br><span class="line"><span class="comment">//新打开一个终端，执行client.js</span></span><br><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 用于请求的选项</span></span><br><span class="line"><span class="keyword">var</span> options = &#123;</span><br><span class="line">   host: <span class="string">'localhost'</span>,</span><br><span class="line">   port: <span class="string">'8080'</span>,</span><br><span class="line">   path: <span class="string">'/index.html'</span>  </span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 处理响应的回调函数</span></span><br><span class="line"><span class="keyword">var</span> callback = <span class="function"><span class="keyword">function</span>(<span class="params">response</span>)</span>&#123;</span><br><span class="line">   <span class="comment">// 不断更新数据</span></span><br><span class="line">   <span class="keyword">var</span> body = <span class="string">''</span>;</span><br><span class="line">   response.on(<span class="string">'data'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">      body += data;</span><br><span class="line">   &#125;);</span><br><span class="line">   </span><br><span class="line">   response.on(<span class="string">'end'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="comment">// 数据接收完成</span></span><br><span class="line">      <span class="built_in">console</span>.log(body);</span><br><span class="line">   &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 向服务端发送请求</span></span><br><span class="line"><span class="keyword">var</span> req = http.request(options, callback);</span><br><span class="line">req.end();</span><br></pre></td></tr></table></figure><p><strong><em>Node.js Express 框架</em></strong><br><a href="https://www.runoob.com/nodejs/nodejs-express-framework.html" target="_blank" rel="noopener">https://www.runoob.com/nodejs/nodejs-express-framework.html</a><br>Express 是一个简洁而灵活的 node.js Web应用框架, 提供了一系列强大特性帮助你创建各种 Web 应用，和丰富的 HTTP 工具。<br>使用 Express 可以快速地搭建一个完整功能的网站.</p><p>Express 框架核心特性：</p><ul><li>可以设置中间件来响应 HTTP 请求</li><li>定义了路由表用于执行不同的 HTTP 请求动作</li><li>可以通过向模板传递参数来动态渲染 HTML 页面</li></ul><p><strong><em>Node.js 多进程</em></strong><br>我们都知道 Node.js 是以单线程的模式运行的，但它使用的是事件驱动来处理并发，这样有助于我们在多核 cpu 的系统上创建多个子进程，从而提高性能。</p><p><strong><em>Node.js 连接 MySQL</em></strong><br><a href="https://www.runoob.com/nodejs/nodejs-mysql.html" target="_blank" rel="noopener">https://www.runoob.com/nodejs/nodejs-mysql.html</a></p><p><strong><em>Node.js 连接 MongoDB</em></strong><br><a href="https://www.runoob.com/nodejs/nodejs-mongodb.html" target="_blank" rel="noopener">https://www.runoob.com/nodejs/nodejs-mongodb.html</a></p>]]></content>
    
    <summary type="html">
    
      Node.js就是运行在服务端的javascript，就是一个javascript的执行环境...大家都这么说，但都太官方，直接上手就明白怎么一回事了。
    
    </summary>
    
    
      <category term="JS" scheme="https://miaoq.github.io/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>BFC</title>
    <link href="https://miaoq.github.io/2018/06/08/CSS-2018-06-08-BFC/"/>
    <id>https://miaoq.github.io/2018/06/08/CSS-2018-06-08-BFC/</id>
    <published>2018-06-08T07:06:57.000Z</published>
    <updated>2019-04-09T08:53:54.958Z</updated>
    
    <content type="html"><![CDATA[<!DOCTYPE html><html><head>    <title></title></head><style type="text/css">    .container{        border: 1px dashed gray;    }    .left{        float: left;    }    .right{        float: right;    }    .bfc{        overflow: hidden;    }    .line-b{        display: inline-block;    }    .abs{        position: absolute;    }    .box {        color: #f55;        background: #fcc;        width: 150px;        height: 150px;        line-height: 150px;        text-align:center;        margin: 30px;    }    .first{      margin:20px;      background:lightgreen;      width:100px;      height:100px;    }    .list{      margin:10px;      background:lightblue;    }    .list > li{      margin:25px;    }    .aside {        width: 100px;        height: 150px;        float: left;        background: #f66;    }    .main {        height: 200px;        background: #fcc;    }    .left-box{      background:pink;      width:150px;      height: 150px;    }    .center-box{      background:lightyellow;      height: 150px;    }    .right-box{      background: lightblue;      width:150px;      height: 150px;    }</style><body>    <div class="notes">        <p>哪些元素会生成BFC（可以通过以下任意合适的方式触发box生成BFC）?</p>        <ul>            <li>根元素</li>            <li>float的值不为none</li>            <li>overflow的值不为visible</li>            <li>display的值为inline-block、table-cell、table-caption</li>            <li>position的值为absolute或fixed</li>        </ul>        <hr>        <p>BFC的约束规则:</p>        <ul>            <li>内部的Box会在垂直方向上一个接一个的放置</li>            <li>属于同一个BFC的两个相邻Box的margin会发生重叠（塌陷）</li>            <li>每个元素的左外边距与包含块的左边界相接触（从左向右），即使浮动元素也是如此。（这说明BFC中子元素不会超出他的包含块，而position为absolute的元素可以超出他的包含块边界）</li>            <li>BFC的区域不会与float的元素区域重叠</li>            <li>计算BFC的高度时，浮动子元素也参与计算</li>            <li>BFC就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面元素，反之亦然</li>        </ul>    </div>    <div class="container bfc">        <!--属于同一个BFC的两个相邻Box的margin会发生重叠（垂直方向）-->        <!--解决：让其不属于同一个BFC-->        <div class="bfc">            <p class="box"></p>        </div>        <p class="box"></p>    </div>    <div class="container bfc">        <!--属于同一个BFC的两个相邻Box的margin会发生重叠（水平方向）-->        <!--解决：让其不属于同一个BFC-->        <p class="box line-b"></p>        <p class="box line-b"></p>        <p class="box line-b"></p>    </div>    <div class="container bfc">        <!--此时div与ul之间的垂直距离，取div、ul、li三者之间的最大外边距，重叠-->        <!--解决：让其不属于同一个BFC，line-b来解决li有点问题，没有垂直排列了-->        <div class="first"></div>        <ul class="list line-b">            <li class="line-b">1</li>            <li class="line-b">2</li>            <li class="line-b">3</li>        </ul>    </div>    <div class="container bfc">        <!--计算BFC的高度时，浮动元素也参与计算，（父元素为BFC）可以达到清除浮动的目的-->        <p class="box left"></p>        <p class="box left"></p>    </div>    <div class="container bfc">        <!--每个元素的margin box的左边，与包含块border box的左边相接触(对于从左往右的格式化，否则相反)。即使存在浮动也是如此-->        <!--BFC的区域不会与float box重叠-->        <!--实现两栏布局-->        <div class="aside"></div>        <div class="main bfc"></div>    </div>    <div class="container bfc">        <!--自适应两栏布局-->        <!--不知道为啥也有点问题-->        <div class="left-box left"></div>        <div class="center-box bfc"></div>        <div class="right-box right"></div>    </div></body></html>]]></content>
    
    <summary type="html">
    
      大概记录了一下BFC（一块渲染区域），注意查看html元素，看效果及注释（还存在两个小问题，后续再来修复）。
    
    </summary>
    
    
      <category term="CSS" scheme="https://miaoq.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>React入门（二）</title>
    <link href="https://miaoq.github.io/2018/05/25/JS-2018-05-25-React%E5%85%A5%E9%97%A8%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>https://miaoq.github.io/2018/05/25/JS-2018-05-25-React入门（二）/</id>
    <published>2018-05-25T01:28:28.000Z</published>
    <updated>2019-04-09T08:53:54.960Z</updated>
    
    <content type="html"><![CDATA[<h3 id="深入JSX"><a href="#深入JSX" class="headerlink" title="深入JSX"></a>深入JSX</h3><p><strong>指定 React 元素类型</strong></p><p>从本质上讲，JSX 只是为 React.createElement(component, props, …children) 函数提供的语法糖</p><p>一个 JSX 标签的开始部分决定了 React 元素的类型</p><p>首字母大写的标签指示 JSX 标签是一个 React 组件</p><p>用户定义组件必须以大写字母开头</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">对 JSX 类型使用点语法</span></span><br><span class="line"><span class="comment">在 JSX 中，你也可以使用点语法引用一个 React 组件。</span></span><br><span class="line"><span class="comment">如果你有一个单一模块(module) ，但却 导出(exports) 多个 React 组件时，这将会很方便。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> MyComponents = &#123;</span><br><span class="line">  DatePicker: <span class="function"><span class="keyword">function</span> <span class="title">DatePicker</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Imagine a &#123;props.color&#125; datepicker here.<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">BlueDatePicker</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">MyComponents.DatePicker</span> <span class="attr">color</span>=<span class="string">"blue"</span> /&gt;</span>;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br></pre></td></tr></table></figure><p><strong>JSX 中的 props(属性)</strong></p><p>JavaScript 表达式可以作为 props(属性)</p><p>props(属性) 默认为 “true”</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">如果你已经有一个 object 类型的 props，并且希望在 JSX 中传入，</span></span><br><span class="line"><span class="comment">你可以使用扩展操作符 ... 传入整个 props 对象。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">当你构建一个一般容器时，属性扩展非常有用。然而，这可能会使得你的代码非常混乱，</span></span><br><span class="line"><span class="comment">因为这非常容易使一些不相关的 props(属性) 传递给组件，而组件并不需要这些 props(属性) 。</span></span><br><span class="line"><span class="comment">因此我们建议谨慎使用该语法。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">Greeting</span> <span class="attr">firstName</span>=<span class="string">"Ben"</span> <span class="attr">lastName</span>=<span class="string">"Hector"</span> /&gt;</span>;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">function App2() &#123;</span></span><br><span class="line"><span class="xml">  const props = &#123;firstName: 'Ben', lastName: 'Hector'&#125;;</span></span><br><span class="line">  return &lt;Greeting &#123;...props&#125; /&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>JSX 中的 Children</strong></p><p>JavaScript 表达式可以作为 Children(子元素)<br>通过使用 {} 包裹，你可以将任何的 JavaScript 元素而作为 children(子元素) 传递</p><p>Functions(函数) 可以作为 Children(子元素)<br>通常情况下，嵌入到 JSX 中的 JavaScript 表达式会被认为是一个字符串、React元素 或者是这些内容的一个列表。然而， props.children 类似于其他的 props(属性) ，可以被传入任何数据，而不是仅仅只是 React 可以渲染的数据。例如，如果有自定义组件，其 props.children 的值可以是回调函数</p><p>Booleans, Null, 和 Undefined 被忽略</p><hr><h3 id="使用-PropTypes-进行类型检查"><a href="#使用-PropTypes-进行类型检查" class="headerlink" title="使用 PropTypes 进行类型检查"></a>使用 PropTypes 进行类型检查</h3><p>随着应用规模的提升，你可以通过类型检测捕获更多的bug。React 内置了类型检测的功能，要在组件中进行类型检测，你可以赋值 propTypes 属性。<br>具体用法：<a href="http://www.css88.com/react/docs/typechecking-with-proptypes.html" target="_blank" rel="noopener">http://www.css88.com/react/docs/typechecking-with-proptypes.html</a></p><p>像 Flow 和 TypeScript 这样的静态类型检查器可以在运行代码之前识别某些类型的问题。 他们还可以通过添加自动完成功能来改善开发人员的工作流程。 出于这个原因，对于更大的代码库我们建议使用 Flow 或者 TypeScript 来替代 PropTypes。</p><p>Flow、TypeScript用法：<a href="http://www.css88.com/react/docs/static-type-checking.html" target="_blank" rel="noopener">http://www.css88.com/react/docs/static-type-checking.html</a></p><h3 id="Refs-和-DOM"><a href="#Refs-和-DOM" class="headerlink" title="Refs 和 DOM"></a>Refs 和 DOM</h3><p>使用 refs 的场景:</p><ul><li>处理focus、文本选择或者媒体播放</li><li>触发强制动画</li><li>集成第三方DOM库</li></ul><p>解决了一些从父组件访问子组件的DOM元素的方法（后续再仔细研究吧，云里雾里~~）</p><hr><h3 id="不受控组件"><a href="#不受控组件" class="headerlink" title="不受控组件"></a>不受控组件</h3><p>在受控组件中，表单数据由 React 组件负责处理。在不受控组件中，其表单数据由 DOM 元素本身处理。</p><hr><h3 id="优化性能"><a href="#优化性能" class="headerlink" title="优化性能"></a>优化性能</h3><ul><li>在开发时使用开发版本（React包含很多在开发过程中很有帮助的警告，体积大），发布时使用生产版本<br>插件的配置<a href="http://www.css88.com/react/docs/optimizing-performance.html" target="_blank" rel="noopener">http://www.css88.com/react/docs/optimizing-performance.html</a></li><li>避免重新渲染</li><li>避免更新</li><li>不要突变(mutate) props 或 state 的值</li><li>使用 Immutable 数据结构</li></ul><hr><h3 id="一致性比较"><a href="#一致性比较" class="headerlink" title="一致性比较"></a>一致性比较</h3><p>添加key属性</p><hr><h3 id="片段"><a href="#片段" class="headerlink" title="片段"></a>片段</h3><p>React 中一个常见模式是为一个组件返回多个元素。 片段(fragments) 可以让你将子元素列表添加到一个分组中，并且不会在DOM中增加额外节点。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">render() &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;React.Fragment&gt;</span><br><span class="line">      &lt;ChildA /&gt;</span><br><span class="line">      &lt;ChildB /&gt;</span><br><span class="line">      &lt;ChildC /&gt;</span><br><span class="line">    &lt;<span class="regexp">/React.Fragment&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p>动机</p><p>一个常见模式是为一个组件返回一个子元素列表</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Table</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;table&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">          &lt;Columns /&gt;</span><br><span class="line">        &lt;<span class="regexp">/tr&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>table&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为了渲染有效的 <code>HTML</code> ， <code>&lt;Columns /&gt;</code> 需要返回多个 <code>&lt;td&gt;</code> 元素。如果 <code>&lt;Columns /&gt;</code> 的 <code>render()</code> 函数里面使用一个父级 <code>div</code> ，那么最终生成的 HTML 将是无效的。所以，这种情况就需要使用 <code>Fragment</code>:</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Columns</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;React.Fragment&gt;</span><br><span class="line">        &lt;td&gt;Hello&lt;<span class="regexp">/td&gt;</span></span><br><span class="line"><span class="regexp">        &lt;td&gt;World&lt;/</span>td&gt;</span><br><span class="line">      &lt;<span class="regexp">/React.Fragment&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p>简写语法<br>可以像使用其他元素一样使用&lt;&gt;&lt;/&gt;，只是它不支持 键(keys) 或 属性(attributes)。<br>但是目前很多工具都不支持。<br><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Columns</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;&gt;</span><br><span class="line">        &lt;td&gt;Hello&lt;<span class="regexp">/td&gt;</span></span><br><span class="line"><span class="regexp">        &lt;td&gt;World&lt;/</span>td&gt;</span><br><span class="line">      &lt;<span class="regexp">/&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure></p><p>如果你需要一个带 key 的片段，你可以直接使用 &lt;React.Fragment /&gt; 。 一个使用场景是映射一个集合为一个片段数组 — 例如：创建一个描述列表：<br>key 是唯一可以传递给 Fragment 的属性。在将来，我们可能增加额外的属性支持，比如事件处理。<br><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Glossary</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;dl&gt;</span><br><span class="line">      &#123;props.items.map(<span class="function"><span class="params">item</span> =&gt;</span> (</span><br><span class="line">        <span class="comment">// 没有`key`，将会触发一个key警告</span></span><br><span class="line">        &lt;React.Fragment key=&#123;item.id&#125;&gt;</span><br><span class="line">          &lt;dt&gt;&#123;item.term&#125;&lt;<span class="regexp">/dt&gt;</span></span><br><span class="line"><span class="regexp">          &lt;dd&gt;&#123;item.description&#125;&lt;/</span>dd&gt;</span><br><span class="line">        &lt;<span class="regexp">/React.Fragment&gt;</span></span><br><span class="line"><span class="regexp">      ))&#125;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>dl&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><h3 id="插槽-Portals"><a href="#插槽-Portals" class="headerlink" title="插槽(Portals)"></a>插槽(Portals)</h3><p>通常来说，当你从组件的 render 方法返回一个元素时，它将被作为子元素被装载到最近父节点 DOM 中。<br>然而，有时候需要将子元素插入到 DOM 节点的其他位置。<br>Portals 提供了一种很好的方法，将子节点渲染到父组件 DOM 层次结构之外的 DOM 节点。</p><hr><h3 id="错误边界-Error-Boundaries"><a href="#错误边界-Error-Boundaries" class="headerlink" title="错误边界(Error Boundaries)"></a>错误边界(Error Boundaries)</h3><p>过去，组件内的 JavaScript 错误常常会破坏 React 内部状态,并导致它在下一次渲染时产生 神秘的 错误。这些错误总会在应用代码中较早的错误引发的，但 React 并没有提供一种方式能够在组件内部优雅地来处理，也不能从错误中恢复。</p><p>错误边界是 React 组件，它可以在子组件树的任何位置捕获 JavaScript 错误，记录这些错误，并显示一个备用 UI ** ，而不是使整个组件树崩溃。 错误边界(Error Boundaries) 在渲染，生命周期方法以及整个组件树下的构造函数中捕获错误。</p><p>注意<br>错误边界 无法 捕获如下错误:</p><ul><li>事件处理</li><li>异步代码 （例如 setTimeout 或 requestAnimationFrame 回调函数）</li><li>服务端渲染</li><li>错误边界自身抛出来的错误 （而不是其子组件）</li></ul><p>如果一个类组件定义了一个名为 <code>componentDidCatch(error, info)</code> (info 是一个含有 componentStack 属性的对象。这一属性包含了错误期间关于组件的堆栈信息。): 的新生命周期方法，它将成为一个错误边界：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ErrorBoundary</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.state = &#123; <span class="attr">hasError</span>: <span class="literal">false</span> &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  componentDidCatch(error, info) &#123;</span><br><span class="line">    <span class="comment">// Display fallback UI</span></span><br><span class="line">    <span class="keyword">this</span>.setState(&#123; <span class="attr">hasError</span>: <span class="literal">true</span> &#125;);</span><br><span class="line">    <span class="comment">// You can also log the error to an error reporting service</span></span><br><span class="line">    logErrorToMyService(error, info);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.state.hasError) &#123;</span><br><span class="line">      <span class="comment">// You can render any custom fallback UI</span></span><br><span class="line">      <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Something went wrong.<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.props.children;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而后你可以像一个普通的组件一样使用：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;ErrorBoundary&gt;</span><br><span class="line">  &lt;MyWidget /&gt;</span><br><span class="line">&lt;<span class="regexp">/ErrorBoundary&gt;</span></span><br></pre></td></tr></table></figure><p><code>componentDidCatch()</code> 方法机制类似于 <code>JavaScript catch {}</code>，但是针对组件。仅有类组件可以成为错误边界。实际上，大多数时间你仅想要定义一个错误边界组件并在你的整个应用中使用。</p><p>注意错误边界(Error Boundaries) 仅可以捕获其子组件的错误。错误边界无法捕获其自身的错误。如果一个错误边界无法渲染错误信息，则错误会向上冒泡至最接近的错误边界。这也类似于 <code>JavaScript</code> 中 <code>catch {}</code> 的工作机制。</p><p>为何不使用 <code>try/catch</code>?<br><code>try / catch</code> 非常棒，但其仅能在命令式代码<code>（imperative code）</code>下可用。<br>然而，React 组件是声明式的并且具体指出 声明 什么需要被渲染。错误边界保留了 React 原生的声明性质，且其行为符合你的预期。例如，即使错误发生 <code>componentDidUpdate</code> 时期由某一个深层组件树中的 <code>setState</code> 调用引起，其仍然能够冒泡到最近的错误边界。</p><p>一个AI:<br>命令式编程 vs 声明式编程 <a href="http://www.vaikan.com/imperative-vs-declarative/" target="_blank" rel="noopener">http://www.vaikan.com/imperative-vs-declarative/</a></p><p>如果你需要在事件处理器内部捕获错误，使用普通的 JavaScript try / catch 语句：<br><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyComponent</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.state = &#123; <span class="attr">error</span>: <span class="literal">null</span> &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  handleClick = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// Do something that could throw</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">      <span class="keyword">this</span>.setState(&#123; error &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.state.error) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Caught an error.<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleClick&#125;</span>&gt;</span>Click Me<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><h3 id="Web-组件"><a href="#Web-组件" class="headerlink" title="Web 组件"></a>Web 组件</h3><p>React 和 web组件 被用以解决不同问题。Web组件为可重用组件提供了强大的封装能力，而React则是提供了保持DOM和数据同步的声明式库。二者目标互补。作为开发者，你可以随意地在Web组件里使用React，或者在React里使用Web组件，或都有。</p><hr><h3 id="高阶组件"><a href="#高阶组件" class="headerlink" title="高阶组件"></a>高阶组件</h3><p>组件是React中代码重用的最小单元<br>高阶组件是一个函数，能够接受一个组件并返回一个新的组件<br>组件是将props转化成UI，然而高阶组件将一个组价转化成另外一个组件</p><p>如何创建 <a href="http://www.css88.com/react/docs/higher-order-components.html" target="_blank" rel="noopener">http://www.css88.com/react/docs/higher-order-components.html</a></p><p>警告:</p><ul><li>不要在render函数中使用高阶组件</li><li>静态方法必须复制</li><li>Refs不会被传递</li></ul><hr><h3 id="与其他库整合"><a href="#与其他库整合" class="headerlink" title="与其他库整合"></a>与其他库整合</h3><p>对于 React 之外的 DOM 节点操作，React 是不会去处理的，因为 React 内部有自己的渲染逻辑。当相同的 DOM 节点被外部的代码改变时，React 就会很迷茫，并不知道发生了什么。</p><p>但这也不意味着 React 无法与其他操作 DOM 节点的库一起使用，你只要清楚他们分别在做什么就可以了。</p><p>最简单的方式就是阻止 React 更新外部在操作的节点，那么你可以通过生成一个 React 根本不会去更新的元素来实现，比如空的 <code>&lt;div /&gt;</code>。</p><hr><h3 id="代码拆分"><a href="#代码拆分" class="headerlink" title="代码拆分"></a>代码拆分</h3><p>打包(Bundling) 是一个处理过程，跟踪导入的文件并将其合并到单个文件：“包” 。然后，这个包文件可以包含到网页上，这样可以一次性加载整个应用程序。</p>]]></content>
    
    <summary type="html">
    
      在阅读完React入门（一）之后，对React的基本用法、实现思路有了大致的了解了，接下来的React入门（二）更加深入地介绍了React的一些高级特性。
    
    </summary>
    
    
      <category term="JS" scheme="https://miaoq.github.io/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>React入门（一）</title>
    <link href="https://miaoq.github.io/2018/05/17/JS-2018-05-17-React%E5%85%A5%E9%97%A8%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>https://miaoq.github.io/2018/05/17/JS-2018-05-17-React入门（一）/</id>
    <published>2018-05-17T07:30:58.000Z</published>
    <updated>2019-04-09T08:53:54.960Z</updated>
    
    <content type="html"><![CDATA[<h3 id="JSX"><a href="#JSX" class="headerlink" title="JSX"></a>JSX</h3><p>JSX是 JavaScrip 的一种扩展语法，可以生成 React “元素”。</p><p>JSX中可以嵌入js表达式。</p><p>JSX是一个表达式，编译之后，就变成了常规的 JavaScript 对象（想想js对象可以干什么，就可以用JSX来干什么，比如：在 if 语句或者是 for 循环中使用 JSX，用它给变量赋值，当做参数接收，或者作为函数的返回值）。</p><p>比起HTML，JSX更接近于JavaScript，所以React DOM使用驼峰(camelCase)属性命名约定, 而不是HTML属性名称。例如，class 在JSX中变为className，tabindex 变为 tabIndex。</p><p>Babel 将JSX编译成 React.createElement() 调用<br>React.createElement()会创建下面这样一个对象：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 注意: 这是简化的结构</span></span><br><span class="line"><span class="keyword">const</span> element = &#123;</span><br><span class="line">  type: <span class="string">'h1'</span>,</span><br><span class="line">  props: &#123;</span><br><span class="line">    className: <span class="string">'greeting'</span>,</span><br><span class="line">    children: <span class="string">'Hello, world'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>了解了上述步骤，仔细这个对象，就应该意识到：</p><ul><li>空标签应该闭合</li><li>子元素散开的，应该在外层加个父元素包裹起来 </li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//应该用"/"闭合</span></span><br><span class="line"><span class="keyword">const</span> element = &lt;img src=&#123;user.avatarUrl&#125; /&gt;;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这是错的，没法创建一个完整的对象</span></span><br><span class="line"><span class="keyword">const</span> element = (</span><br><span class="line">    &lt;h1&gt;Hello!&lt;/h1&gt;</span><br><span class="line">    &lt;h2&gt;Good to see you here.&lt;<span class="regexp">/h2&gt;</span></span><br><span class="line"><span class="regexp">);</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> element = (</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1&gt;Hello!&lt;/h1&gt;</span><br><span class="line">    &lt;h2&gt;Good to see you here.&lt;<span class="regexp">/h2&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>div&gt;</span><br><span class="line">);</span><br><span class="line"><span class="comment">//添加一个div包裹</span></span><br><span class="line"><span class="comment">//多行时，用圆括号包裹起来，可减少意外添加分号的错误</span></span><br></pre></td></tr></table></figure><hr><h3 id="元素渲染"><a href="#元素渲染" class="headerlink" title="元素渲染"></a>元素渲染</h3><p>不同于浏览器的 DOM 元素， React 元素是普通的对象，非常容易创建。React DOM 会负责更新 DOM ，以匹配React元素</p><p>React 元素是不可突变（immutable）的. 一旦你创建了一个元素, 就不能再修改其子元素或任何属性。一个元素就像电影里的一帧: 它表示在某一特定时间点的 UI 。<br>更新 UI 的唯一方法是创建一个新的元素, 并将其传入 ReactDOM.render() 方法。<br>实际上，大多数 React 应用只会调用 ReactDOM.render() 一次，好的解决方法是将代码封装到有状态的组件中。</p><p>React DOM 会将元素及其子元素与之前版本逐一对比, 并只对有必要更新的 DOM 进行更新, 以达到 DOM 所需的状态。</p><hr><h3 id="组件-Components-和-属性-Props"><a href="#组件-Components-和-属性-Props" class="headerlink" title="组件(Components) 和 属性(Props)"></a>组件(Components) 和 属性(Props)</h3><p>组件就像JavaScript的函数，可以接收任意输入(称为”props”)， 并返回 React 元素，用以描述屏幕显示内容。</p><p><strong>渲染一个组件</strong></p><p>元素也可以代表用户定义的组件<br>当 React 遇到一个代表用户定义组件的元素时，它将 JSX 属性以一个单独对象的形式传递给相应的组件。 我们将其称为 “props”对象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Welcome</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &lt;h1&gt;Hello, &#123;props.name&#125;&lt;/h1&gt;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> element = &lt;Welcome name="Sara" /&gt;;</span><br><span class="line">ReactDOM.render(</span><br><span class="line">  element,</span><br><span class="line">  document.getElementById('root')</span><br><span class="line">);</span><br><span class="line">//在页面上渲染 “Hello, Sara”</span><br></pre></td></tr></table></figure><p>重述一下上面这个例子:</p><ol><li>我们调用了 ReactDOM.render() 方法并向其中传入了 <code>&lt;Welcome name=&quot;Sara&quot; /&gt;</code> 元素。</li><li>React 调用 Welcome 组件，并向其中传入了 <code>{name: &#39;Sara&#39;}</code> 作为 props 对象。</li><li>Welcome 组件返回 <code>&lt;h1&gt;Hello, Sara&lt;/h1&gt;</code>。</li><li>React DOM 迅速更新 DOM，使其显示为 <code>&lt;h1&gt;Hello, Sara&lt;/h1&gt;</code>。</li></ol><p>注意：组件名称总是以大写字母开始</p><p>Props 是只读的</p><hr><h3 id="状态-State-和-生命周期"><a href="#状态-State-和-生命周期" class="headerlink" title="状态(State) 和 生命周期"></a>状态(State) 和 生命周期</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Welcome</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &lt;h1&gt;Hello, &#123;props.name&#125;&lt;/h1&gt;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//函数式组件</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Welcome</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> &lt;h1&gt;Hello, &#123;this.props.name&#125;&lt;/h1&gt;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//类组件</span></span><br></pre></td></tr></table></figure><p>把函数式组件转换为类组件：</p><ol><li>创建一个继承自 React.Component 类的 ES6 class 同名类。</li><li>添加一个名为 render() 的空方法。</li><li>把原函数中的所有内容移至 render() 中。</li><li>在 render() 方法中使用 this.props 替代 props。</li><li>删除保留的空函数声明。</li></ol><p>state 和 props 类似，但是它是私有的，并且由组件本身完全控制。</p><p>用类定义的组件有一些额外的特性， 这个”类专有的特性”， 指的就是局部状态。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">  <span class="keyword">super</span>(props);</span><br><span class="line">  <span class="keyword">this</span>.state = &#123;<span class="attr">date</span>: <span class="keyword">new</span> <span class="built_in">Date</span>()&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//类组件应始终使用 props 调用基础构造函数</span></span><br></pre></td></tr></table></figure><p><strong>在类中添加生命周期方法</strong></p><p>先了解下React 生命周期的三种状态： 1. 初始化 2.更新 3.销毁（参照<a href="https://www.cnblogs.com/qiaojie/p/6135180.html" target="_blank" rel="noopener">https://www.cnblogs.com/qiaojie/p/6135180.html</a>）</p><p>初始化：</p><ol><li><code>getDefaultProps()</code>，设置默认的props，也可以用dufaultProps设置组件的默认属性</li><li>初始化状态，在constructor中定义<code>this.state</code>，此时可以访问this.props</li><li><code>componentWillMount()</code>，组件初始化时只调用，以后组件更新不调用，整个生命周期只调用一次，此时可以修改state</li><li><code>render()</code>，React最重要的步骤，创建虚拟dom，进行diff算法，更新dom树都在此进行，此时就不能更改state了</li><li><code>componentDidMount()</code>，组件渲染之后调用，只调用一次</li></ol><p>更新：</p><ol start="6"><li><code>componentWillReceiveProps(nextProps)</code>，组件初始化时不调用，组件接受新的props时调用</li><li><code>shouldComponentUpdate(nextProps, nextState)</code>,react性能优化非常重要的一环。组件接受新的state或者props时调用，我们可以设置在此对比前后两个props和state是否相同，如果相同则返回false阻止更新，因为相同的属性状态一定会生成相同的dom树，这样就不需要创造新的dom树和旧的dom树进行diff算法对比，节省大量性能，尤其是在dom结构复杂的时候</li><li><code>componentWillUpdata(nextProps, nextState)</code>，组件初始化时不调用，只有在组件将要更新时才调用，此时可以修改state</li><li><code>render()</code>，组件渲染</li><li><code>componentDidUpdate()</code>，组件初始化时不调用，组件更新完成后调用，此时可以获取dom节点</li></ol><p>卸载：</p><ol start="11"><li><code>componentWillUnmount()</code>，组件将要卸载时调用，一些事件监听和定时器需要在此时清除</li></ol><p>在一个具有许多组件的应用程序中，在组件被销毁时释放所占用的资源是非常重要的。</p><p>this.props 由 React 本身设定, 而 this.state 具有特殊的含义，但如果需要存储一些不用于视觉输出的内容，则可以手动向类中添加额外的字段。</p><p>如果在 render() 方法中没有被引用, 它不应该出现在 state 中。</p><p><strong>复用和封装</strong></p><p>最原始粗暴，通过调 ReactDOM.render() 方法来更新渲染的输出:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">tick</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> element = (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;h1&gt;Hello, world!&lt;/h1&gt;</span><br><span class="line">      &lt;h2&gt;It is &#123;<span class="keyword">new</span> <span class="built_in">Date</span>().toLocaleTimeString()&#125;.&lt;<span class="regexp">/h2&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">  );</span><br><span class="line">  ReactDOM.render(</span><br><span class="line">    element,</span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">'root'</span>)</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">setInterval(tick, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure><p>通过封装，变得更复用：</p><ol><li>把函数式组件转化为类组件</li><li>在类组件中添加本地状态(state)</li><li>在类中添加生命周期方法</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Clock</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.state = &#123;<span class="attr">date</span>: <span class="keyword">new</span> <span class="built_in">Date</span>()&#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  componentDidMount() &#123;</span><br><span class="line">    <span class="keyword">this</span>.timerID = setInterval(</span><br><span class="line">      () =&gt; <span class="keyword">this</span>.tick(),</span><br><span class="line">      <span class="number">1000</span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  componentWillUnmount() &#123;</span><br><span class="line">    clearInterval(<span class="keyword">this</span>.timerID);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  tick() &#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">      date: <span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;h1&gt;Hello, world!&lt;/h1&gt;</span><br><span class="line">        &lt;h2&gt;It is &#123;<span class="keyword">this</span>.state.date.toLocaleTimeString()&#125;.&lt;<span class="regexp">/h2&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(</span><br><span class="line">  &lt;Clock /&gt;,</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">'root'</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>回顾一下该过程，以及调用方法的顺序：</p><ol><li>当 <code>&lt;Clock /&gt;</code> 被传入 <code>ReactDOM.render()</code> 时, React 会调用 Clock 组件的构造函数。 因为 Clock 要显示的是当前时间，所以它将使用包含当前时间的对象来初始化 <code>this.state</code> 。我们稍后会更新此状态。</li><li>然后 React 调用了 Clock 组件的 <code>render()</code> 方法。 React 从该方法返回内容中得到要显示在屏幕上的内容。然后，React 然后更新 DOM 以匹配 Clock 的渲染输出。</li><li>当 Clock 输出被插入到 DOM 中时，React 调用 <code>componentDidMount()</code> 生命周期钩子。在该方法中，Clock 组件请求浏览器设置一个定时器来一次调用 tick()。</li><li>浏览器会每隔一秒调用一次 <code>tick()</code> 方法。在该方法中， Clock 组件通过 <code>setState()</code> 方法并传递一个包含当前时间的对象来安排一个 UI 的更新。通过 <code>setState()</code>, React 得知了组件 state(状态)的变化, 随即再次调用 <code>render()</code> 方法，获取了当前应该显示的内容。这次，<code>render()</code> 方法中的 <code>this.state.date</code> 的值已经发生了改变，从而，其输出的内容也随之改变。React 于是据此对 DOM 进行更新。</li><li>如果通过其他操作将 Clock 组件从 DOM 中移除了, React 会调用 <code>componentWillUnmount()</code> 生命周期钩子, 所以计时器也会被停止。</li></ol><p>正确地使用 State(状态)（这部分仔细看看文档上的例子说明<a href="http://www.css88.com/react/docs/state-and-lifecycle.html" target="_blank" rel="noopener">http://www.css88.com/react/docs/state-and-lifecycle.html</a>）:</p><ul><li>不要直接修改 <code>state(状态)</code>，用 <code>setState()</code> 代替</li><li><code>state(状态)</code> 更新可能是异步的，React 为了优化性能，有可能会将多个 <code>setState()</code> 调用合并为一次更新</li><li><code>state(状态)</code> 更新会被合并，当你调用 <code>setState()</code>， React 将合并你提供的对象到当前的状态中</li></ul><p><code>setState()</code> 的另一种使用形式：它接受一个函数而不是一个对象。这个函数将接收前一个状态作为第一个参数，应用更新时的 props 作为第二个参数</p><p><strong>数据向下流动</strong></p><p>一个组件（无论作为父组件还是子组件）无法获取另一个组件的信息（是否有状态，是函数组件还是类组件）（因此， state 经常被称为 本地状态 或 封装状态），但可以选择将 state(状态) 向下传递，作为其子组件的 props(属性)</p><p>单向数据流， 任何 state(状态) 始终由某个特定组件所有，并且从该 state(状态) 导出的任何数据 或 UI 只能影响树中 “下方” 的组件</p><hr><h3 id="处理事件"><a href="#处理事件" class="headerlink" title="处理事件"></a>处理事件</h3><p>通过 React 元素处理事件跟在 DOM 元素上处理事件的区别:</p><ul><li>React 事件使用驼峰命名，而不是全部小写</li><li>通过 JSX , 你传递一个函数作为事件处理程序，而不是一个字符串</li><li>在 React 中你不能通过返回 false 来阻止默认行为，必须明确调用 preventDefault 方法</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ActionLink</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">handleClick</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    e.preventDefault();<span class="comment">//明确调用 preventDefault 方法</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'The link was clicked.'</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;a href=<span class="string">"#"</span> onClick=&#123;handleClick&#125;&gt;</span><br><span class="line">      Click me</span><br><span class="line">    &lt;<span class="regexp">/a&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">/</span>* </span><br><span class="line">这里的 e 是一个合成的事件, React 根据 W3C 规范 定义了这个合成事件，  </span><br><span class="line">所以你不需要担心跨浏览器的兼容性问题。</span><br><span class="line">*<span class="regexp">/</span></span><br></pre></td></tr></table></figure><p>当使用 React 时，你一般不需要调用 addEventListener 在 DOM 元素被创建后添加事件监听器。相反，只要当元素被初始渲染的时候提供一个监听器就可以了</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Toggle</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.state = &#123;<span class="attr">isToggleOn</span>: <span class="literal">true</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这个绑定是必要的，使`this`在回调中起作用</span></span><br><span class="line">    <span class="keyword">this</span>.handleClick = <span class="keyword">this</span>.handleClick.bind(<span class="keyword">this</span>);</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    在JSX回调中你必须注意 this 的指向。在 JavaScript 中，类方法默认没有绑定的。  </span></span><br><span class="line"><span class="comment">    如果你忘记绑定 this.handleClick 并将其传递给onClick，  </span></span><br><span class="line"><span class="comment">    那么在直接调用该函数时，this 会是 undefined 。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    这不是 React 特有的行为；这是 JavaScript 中的函数如何工作的一部分。  </span></span><br><span class="line"><span class="comment">    一般情况下，如果你引用一个后面没跟 () 的方法，例如 onClick=&#123;this.handleClick&#125; ，  </span></span><br><span class="line"><span class="comment">    那你就应该 绑定(bind) 该方法。</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  handleClick() &#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(<span class="function"><span class="params">prevState</span> =&gt;</span> (&#123;</span><br><span class="line">      isToggleOn: !prevState.isToggleOn</span><br><span class="line">    &#125;));</span><br><span class="line">    <span class="comment">//setState() 的另一种使用形式：它接受一个函数而不是一个对象</span></span><br><span class="line">    <span class="comment">//此处省略了第二个参数</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;button onClick=&#123;<span class="keyword">this</span>.handleClick&#125;&gt;</span><br><span class="line">        &#123;<span class="keyword">this</span>.state.isToggleOn ? <span class="string">'ON'</span> : <span class="string">'OFF'</span>&#125;</span><br><span class="line">      &lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">ReactDOM.render(</span></span><br><span class="line"><span class="regexp">  &lt;Toggle /</span>&gt;,</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">'root'</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;(e)</span> =&gt;</span> this.deleteRow(id, e)&#125;&gt;Delete Row<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.deleteRow.bind(this,</span> <span class="attr">id</span>)&#125;&gt;</span>Delete Row<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--将参数传递给事件处理程序，两种方式，参数 e 作为 React 事件对象将会被作为第二个参数进行传递--&gt;</span></span><br></pre></td></tr></table></figure><hr><h3 id="条件渲染"><a href="#条件渲染" class="headerlink" title="条件渲染"></a>条件渲染</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//元素变量，可以用变量来存储元素</span></span><br><span class="line"><span class="keyword">let</span> button = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span> (isLoggedIn) &#123;</span><br><span class="line">  button = <span class="xml"><span class="tag">&lt;<span class="name">LogoutButton</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleLogoutClick&#125;</span> /&gt;</span>;</span></span><br><span class="line"><span class="xml">&#125; else &#123;</span></span><br><span class="line">  button = &lt;LoginButton onClick=&#123;this.handleLoginClick&#125; /&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用逻辑 &amp;&amp; 操作符的内联 if 用法</span></span><br><span class="line">&#123;unreadMessages.length &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">  &lt;h2&gt;</span><br><span class="line">    You have &#123;unreadMessages.length&#125; unread messages.</span><br><span class="line">  &lt;<span class="regexp">/h2&gt;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用条件操作符的内联 If-Else</span></span><br><span class="line"><span class="keyword">return</span> (</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    The user is &lt;b&gt;&#123;isLoggedIn ? <span class="string">'currently'</span> : <span class="string">'not'</span>&#125;&lt;<span class="regexp">/b&gt; logged in.</span></span><br><span class="line"><span class="regexp">  &lt;/</span>div&gt;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//防止组件渲染，返回 null 而不是其渲染输出</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">WarningBanner</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!props.warn) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div className=<span class="string">"warning"</span>&gt;</span><br><span class="line">      Warning!</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><hr><h3 id="列表-Lists-和-键-Keys"><a href="#列表-Lists-和-键-Keys" class="headerlink" title="列表(Lists) 和 键(Keys)"></a>列表(Lists) 和 键(Keys)</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//多组件渲染</span></span><br><span class="line"><span class="keyword">const</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">const</span> listItems = numbers.map(<span class="function">(<span class="params">number</span>) =&gt;</span></span><br><span class="line">  &lt;li&gt;&#123;number&#125;&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">);</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">ReactDOM.render(</span></span><br><span class="line"><span class="regexp">  &lt;ul&gt;&#123;listItems&#125;&lt;/u</span>l&gt;,</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">'root'</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//基本列表组件</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">NumberList</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> numbers = props.numbers;</span><br><span class="line">  <span class="keyword">const</span> listItems = numbers.map(<span class="function">(<span class="params">number</span>) =&gt;</span></span><br><span class="line">    &lt;li key=&#123;number.toString()&#125;&gt;</span><br><span class="line">      &#123;number&#125;</span><br><span class="line">    &lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">    /</span>* </span><br><span class="line">    键(Keys) 帮助 React 标识哪个项被修改、添加或者移除了  </span><br><span class="line">    数组中的每一个元素都应该有一个唯一不变的键(Keys)来标识</span><br><span class="line">    *<span class="regexp">/</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">  return (</span></span><br><span class="line"><span class="regexp">    &lt;ul&gt;&#123;listItems&#125;&lt;/u</span>l&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line">ReactDOM.render(</span><br><span class="line">  &lt;NumberList numbers=&#123;numbers&#125; /&gt;,</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">'root'</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><ul><li>在元素中调用 <code>map()</code> 的地方制定 keys</li><li>keys 在同辈元素中必须是唯一的</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在 JSX 中嵌入 map()</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">NumberList</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> numbers = props.numbers;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">      &#123;numbers.map(<span class="function">(<span class="params">number</span>) =&gt;</span></span><br><span class="line">        &lt;ListItem key=&#123;number.toString()&#125;</span><br><span class="line">                  value=&#123;number&#125; /&gt;</span><br><span class="line"></span><br><span class="line">      )&#125;</span><br><span class="line">    &lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/JSX允许在大括号中嵌入任何表达式，因此可以 内联 map() 结果</span></span><br></pre></td></tr></table></figure><hr><h3 id="表单-Forms"><a href="#表单-Forms" class="headerlink" title="表单(Forms)"></a>表单(Forms)</h3><p>在 HTML 中，表单元素如 <code>&lt;input&gt;</code>，<code>&lt;textarea&gt;</code> 和 <code>&lt;select&gt;</code> 表单元素通常保持自己的状态，并根据用户输入进行更新。而在 React 中，可变状态一般保存在组件的 <code>state(状态)</code> 属性中，并且只能通过 <code>setState()</code> 更新。</p><p>我们可以通过“使 React 的 state 成为 单一数据源 ”原则 来结合这两个形式。然后渲染表单的 React 组件也可以控制在用户输入之后的行为。这种形式，其值由 React 控制的输入表单元素称为“受控组件”。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NameForm</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.state = &#123;<span class="attr">value</span>: <span class="string">''</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.handleChange = <span class="keyword">this</span>.handleChange.bind(<span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">this</span>.handleSubmit = <span class="keyword">this</span>.handleSubmit.bind(<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  handleChange(event) &#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;<span class="attr">value</span>: event.target.value&#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//html自身的event.target.value与React的state结合</span></span><br><span class="line"></span><br><span class="line">  handleSubmit(event) &#123;</span><br><span class="line">    alert(<span class="string">'A name was submitted: '</span> + <span class="keyword">this</span>.state.value);</span><br><span class="line">    event.preventDefault();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;form onSubmit=&#123;<span class="keyword">this</span>.handleSubmit&#125;&gt;</span><br><span class="line">        &lt;label&gt;</span><br><span class="line">          Name:</span><br><span class="line">          &lt;input type=<span class="string">"text"</span> value=&#123;<span class="keyword">this</span>.state.value&#125; onChange=&#123;<span class="keyword">this</span>.handleChange&#125; /&gt;</span><br><span class="line">        &lt;<span class="regexp">/label&gt;</span></span><br><span class="line"><span class="regexp">        &lt;input type="submit" value="Submit" /</span>&gt;</span><br><span class="line">      &lt;<span class="regexp">/form&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p>对于受控组件来说，每一次 state(状态) 变化都会伴有相关联的处理函数。这使得可以直接修改或验证用户的输入。比如，如果我们希望强制 name 的输入都是大写字母，可以这样来写 handleChange 方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">handleChange(event) &#123;</span><br><span class="line">  <span class="keyword">this</span>.setState(&#123;<span class="attr">value</span>: event.target.value.toUpperCase()&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  textare 标签</span></span><br><span class="line"><span class="comment">  用 value 属性替代&lt;textarea&gt;的赋值，表单中&lt;textarea&gt;的书写方式接近于单行文本输入框</span></span><br><span class="line"><span class="comment">  下面仅展示了部分代码</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">this</span>.state = &#123;</span><br><span class="line">  value: <span class="string">'Please write an essay about your favorite DOM element.'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">handleChange(event) &#123;</span><br><span class="line">  <span class="keyword">this</span>.setState(&#123;<span class="attr">value</span>: event.target.value&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">value</span>=<span class="string">&#123;this.state.value&#125;</span> <span class="attr">onChange</span>=<span class="string">&#123;this.handleChange&#125;</span> /&gt;</span></span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  select 标签</span></span><br><span class="line"><span class="comment">  在根 select 标签中使用了一个 value 属性，来选中选项</span></span><br><span class="line"><span class="comment">  下面仅展示了部分代码</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">this</span>.state = &#123;<span class="attr">value</span>: <span class="string">'coconut'</span>&#125;;</span><br><span class="line"></span><br><span class="line">handleChange(event) &#123;</span><br><span class="line">  <span class="keyword">this</span>.setState(&#123;<span class="attr">value</span>: event.target.value&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> (</span><br><span class="line">  ...</span><br><span class="line">  &lt;select value=&#123;<span class="keyword">this</span>.state.value&#125; onChange=&#123;<span class="keyword">this</span>.handleChange&#125;&gt;</span><br><span class="line">  ...</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">//可以将一个数组传递给 value 属性，允许你在 select 标签中选择多个选项：</span></span><br><span class="line">&lt;select multiple=&#123;<span class="literal">true</span>&#125; value=&#123;[<span class="string">'B'</span>, <span class="string">'C'</span>]&#125;&gt;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">file input 标签</span></span><br><span class="line"><span class="comment">在 React 中，一个 &lt;input type =“file”/&gt; 和一个普通的 &lt;input /&gt; 类似，</span></span><br><span class="line"><span class="comment">但有一个重要的区别：它是只读的(read-only)。（您不能以编程方式设置值。）</span></span><br><span class="line"><span class="comment">相反，你应该使用 File API 与文件进行交互。</span></span><br><span class="line"><span class="comment">以下示例显示了如何使用一个 ref 来访问提交处理程序中的文件：</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileInput</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.handleSubmit = <span class="keyword">this</span>.handleSubmit.bind(</span><br><span class="line">      <span class="keyword">this</span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">  handleSubmit(event) &#123;</span><br><span class="line">    event.preventDefault();</span><br><span class="line">    alert(</span><br><span class="line">      <span class="string">`Selected file - <span class="subst">$&#123;</span></span></span><br><span class="line"><span class="string"><span class="subst">        <span class="keyword">this</span>.fileInput.files[<span class="number">0</span>].name</span></span></span><br><span class="line"><span class="string"><span class="subst">      &#125;</span>`</span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;form</span><br><span class="line">        onSubmit=&#123;<span class="keyword">this</span>.handleSubmit&#125;&gt;</span><br><span class="line">        &lt;label&gt;</span><br><span class="line">          Upload file:</span><br><span class="line">          &lt;input</span><br><span class="line">            type=<span class="string">"file"</span></span><br><span class="line">            ref=&#123;input =&gt; &#123;</span><br><span class="line">              <span class="keyword">this</span>.fileInput = input;</span><br><span class="line">            &#125;&#125;</span><br><span class="line">          /&gt;</span><br><span class="line">        &lt;<span class="regexp">/label&gt;</span></span><br><span class="line"><span class="regexp">        &lt;br /</span>&gt;</span><br><span class="line">        &lt;button type=<span class="string">"submit"</span>&gt;</span><br><span class="line">          Submit</span><br><span class="line">        &lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>form&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(</span><br><span class="line">  &lt;FileInput /&gt;,</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">'root'</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">处理多个输入元素</span></span><br><span class="line"><span class="comment">当您需要处理多个受控的 input 元素时，您可以为每个元素添加一个 name 属性，</span></span><br><span class="line"><span class="comment">并且让处理函数根据 event.target.name 的值来选择要做什么。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Reservation</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.state = &#123;</span><br><span class="line">      isGoing: <span class="literal">true</span>,</span><br><span class="line">      numberOfGuests: <span class="number">2</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.handleInputChange = <span class="keyword">this</span>.handleInputChange.bind(<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  handleInputChange(event) &#123;</span><br><span class="line">    <span class="keyword">const</span> target = event.target;</span><br><span class="line">    <span class="keyword">const</span> value = target.type === <span class="string">'checkbox'</span> ? target.checked : target.value;</span><br><span class="line">    <span class="keyword">const</span> name = target.name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">      [name]: value</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;form&gt;</span><br><span class="line">        &lt;label&gt;</span><br><span class="line">          Is going:</span><br><span class="line">          &lt;input</span><br><span class="line">            name=<span class="string">"isGoing"</span></span><br><span class="line">            type=<span class="string">"checkbox"</span></span><br><span class="line">            checked=&#123;<span class="keyword">this</span>.state.isGoing&#125;</span><br><span class="line">            onChange=&#123;<span class="keyword">this</span>.handleInputChange&#125; /&gt;</span><br><span class="line">        &lt;<span class="regexp">/label&gt;</span></span><br><span class="line"><span class="regexp">        &lt;br /</span>&gt;</span><br><span class="line">        &lt;label&gt;</span><br><span class="line">          <span class="built_in">Number</span> <span class="keyword">of</span> guests:</span><br><span class="line">          &lt;input</span><br><span class="line">            name=<span class="string">"numberOfGuests"</span></span><br><span class="line">            type=<span class="string">"number"</span></span><br><span class="line">            value=&#123;<span class="keyword">this</span>.state.numberOfGuests&#125;</span><br><span class="line">            onChange=&#123;<span class="keyword">this</span>.handleInputChange&#125; /&gt;</span><br><span class="line">        &lt;<span class="regexp">/label&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>form&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="状态提升-Lifting-State-Up"><a href="#状态提升-Lifting-State-Up" class="headerlink" title="状态提升(Lifting State Up)"></a>状态提升(Lifting State Up)</h3><p>通常情况下，同一个数据的变化需要几个不同的组件来反映。我们建议提升共享的状态到它们最近的祖先组件中。</p><p>在 React 中，共享 state(状态) 是通过将其移动到需要它的组件的最接近的共同祖先组件来实现的。 这被称为“状态提升(Lifting State Up)”。<br>共享状态的原理：<br>props(属性) 是只读的，而state可以通过调用this.setState()改变，因此，用props代替state，该props的值由父组件提供。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Calculator</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.handleCelsiusChange = <span class="keyword">this</span>.handleCelsiusChange.bind(<span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">this</span>.handleFahrenheitChange = <span class="keyword">this</span>.handleFahrenheitChange.bind(<span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">this</span>.state = &#123;<span class="attr">temperature</span>: <span class="string">''</span>, <span class="attr">scale</span>: <span class="string">'c'</span>&#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  handleCelsiusChange(temperature) &#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;<span class="attr">scale</span>: <span class="string">'c'</span>, temperature&#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  handleFahrenheitChange(temperature) &#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;<span class="attr">scale</span>: <span class="string">'f'</span>, temperature&#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">const</span> scale = <span class="keyword">this</span>.state.scale;</span><br><span class="line">    <span class="keyword">const</span> temperature = <span class="keyword">this</span>.state.temperature;</span><br><span class="line">    <span class="keyword">const</span> celsius = scale === <span class="string">'f'</span> ? tryConvert(temperature, toCelsius) : temperature;</span><br><span class="line">    <span class="keyword">const</span> fahrenheit = scale === <span class="string">'c'</span> ? tryConvert(temperature, toFahrenheit) : temperature;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;TemperatureInput</span><br><span class="line">          scale=<span class="string">"c"</span></span><br><span class="line">          temperature=&#123;celsius&#125;</span><br><span class="line">          onTemperatureChange=&#123;<span class="keyword">this</span>.handleCelsiusChange&#125; /&gt;</span><br><span class="line"></span><br><span class="line">        &lt;TemperatureInput</span><br><span class="line">          scale=<span class="string">"f"</span></span><br><span class="line">          temperature=&#123;fahrenheit&#125;</span><br><span class="line">          onTemperatureChange=&#123;<span class="keyword">this</span>.handleFahrenheitChange&#125; /&gt;</span><br><span class="line"></span><br><span class="line">        &lt;BoilingVerdict</span><br><span class="line">          celsius=&#123;<span class="built_in">parseFloat</span>(celsius)&#125; /&gt;</span><br><span class="line"></span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p>现在，无论你编辑哪个输入框，Calculator 中的 this.state.temperature 和 this.state.scale 都会更新。其中一个输入框获取值，所以任何用户输入都被保留，并且另一个输入总是基于它重新计算值。</p><p>让我们回顾一下编辑输入时会发生什么：</p><ul><li><code>React</code> 调用在 DOM <code>&lt;input&gt;</code> 上的 <code>onChange</code> 指定的函数。在我们的例子中，这是 <code>TemperatureInput</code> 组件中的 <code>handleChange</code> 方法。</li><li><code>TemperatureInput</code> 组件中的 <code>handleChange</code> 方法使用 新的期望值 调用 <code>this.props.onTemperatureChange()</code>。<code>TemperatureInput</code> 组件中的 <code>props(属性)</code> ，包括 <code>onTemperatureChange</code>，由其父组件 <code>Calculator</code> 提供。</li><li>当它预先呈现时， <code>Calculator</code> 指定了摄氏 <code>TemperatureInput</code> 的 <code>onTemperatureChange</code> 是 <code>Calculator</code> 的 <code>handleCelsiusChange</code> 方法，并且华氏 <code>TemperatureInput</code> 的 <code>onTemperatureChange</code> 是 <code>Calculator</code> 的 <code>handleFahrenheitChange</code> 方法。因此，会根据我们编辑的输入框，分别调用这两个 <code>Calculator</code> 方法。</li><li>在这些方法中， <code>Calculator</code> 组件要求 <code>React</code> 通过使用 新的输入值 和 刚刚编辑的输入框的当前度量衡 来调用 <code>this.setState()</code> 来重新渲染自身。</li><li><code>React</code> 调用 <code>Calculator</code> 组件的 <code>render</code> 方法来了解 UI 外观应该是什么样子。基于当前温度和激活的度量衡来重新计算两个输入框的值。这里进行温度转换。</li><li><code>React</code> 使用 <code>Calculator</code> 指定的新 <code>props(属性)</code> 调用各个 <code>TemperatureInput</code> 组件的 <code>render</code> 方法。 它了解 UI 外观应该是什么样子。</li><li><code>React DOM</code> 更新 <code>DOM</code> 以匹配期望的输入值。我们刚刚编辑的输入框接收当前值，另一个输入框更新为转换后的温度。</li></ul><p><strong>经验总结</strong></p><p>在一个 React 应用中，对于任何可变的数据都应该循序“单一数据源”原则。通常情况下，state 首先被添加到需要它进行渲染的组件。然后，如果其它的组件也需要它，你可以提升状态到它们最近的祖先组件。你应该依赖 从上到下的数据流向 ，而不是试图在不同的组件中同步状态。</p><p>提升状态相对于双向绑定方法需要写更多的“模板”代码，但是有一个好处，它可以更方便的找到和隔离 bugs。由于任何 state(状态) 都 “存活” 在若干的组件中，而且可以分别对其独立修改，所以发生错误的可能大大减少。另外，你可以实现任何定制的逻辑来拒绝或者转换用户输入。</p><p>如果某个东西可以从 props(属性) 或者 state(状态) 得到，那么它可能不应该在 state(状态) 中。例如，我们只保存最后编辑的 temperature 和它的 scale，而不是保存 celsiusValue 和 fahrenheitValue 。另一个输入框的值总是在 render() 方法中计算得来的。这使我们对其进行清除和四舍五入到其他字段同时不会丢失用户输入的精度。</p><p>React 开发者工具: <a href="https://github.com/facebook/react-devtools" target="_blank" rel="noopener">https://github.com/facebook/react-devtools</a></p><hr><h3 id="组合-VS-继承（Composition-vs-Inheritance）"><a href="#组合-VS-继承（Composition-vs-Inheritance）" class="headerlink" title="组合 VS 继承（Composition vs Inheritance）"></a>组合 VS 继承（Composition vs Inheritance）</h3><p>一些组件在设计前无法获知自己要使用什么子组件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SplitPane</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div className=<span class="string">"SplitPane"</span>&gt;</span><br><span class="line">      &lt;div className=<span class="string">"SplitPane-left"</span>&gt;</span><br><span class="line">        &#123;props.left&#125;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">      &lt;div className="SplitPane-right"&gt;</span></span><br><span class="line"><span class="regexp">        &#123;props.right&#125;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>div&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">function App() &#123;</span></span><br><span class="line"><span class="regexp">  return (</span></span><br><span class="line"><span class="regexp">    &lt;SplitPane</span></span><br><span class="line"><span class="regexp">      left=&#123;</span></span><br><span class="line"><span class="regexp">        &lt;Contacts /</span>&gt;</span><br><span class="line">      &#125;</span><br><span class="line">      right=&#123;</span><br><span class="line">        &lt;Chat /&gt;</span><br><span class="line">      &#125; /&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如 &lt;Contacts /&gt; 和 &lt;Chat /&gt; 等 React 元素本质上也是对象，</span></span><br><span class="line"><span class="comment">//所以可以将其像其他数据一样作为 props(属性) 传递使用。</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Dialog</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;FancyBorder color=<span class="string">"blue"</span>&gt;</span><br><span class="line">      &lt;h1 className=<span class="string">"Dialog-title"</span>&gt;</span><br><span class="line">        &#123;props.title&#125;</span><br><span class="line">      &lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">      &lt;p className="Dialog-message"&gt;</span></span><br><span class="line"><span class="regexp">        &#123;props.message&#125;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>p&gt;</span><br><span class="line">    &lt;<span class="regexp">/FancyBorder&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">function WelcomeDialog() &#123;</span></span><br><span class="line"><span class="regexp">  return (</span></span><br><span class="line"><span class="regexp">    &lt;Dialog</span></span><br><span class="line"><span class="regexp">      title="Welcome"</span></span><br><span class="line"><span class="regexp">      message="Thank you for visiting our spacecraft!" /</span>&gt;</span><br><span class="line"></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//一个偏“特殊”的组件渲染出一个偏“通用”的组件</span></span><br></pre></td></tr></table></figure><p>总结：<br>使用 props(属性) 和 组合已经足够灵活来明确、安全的定制一个组件的外观和行为。切记，组件可以接受任意的 props(属性) ，包括原始值、React 元素，或者函数。<br>如果要在组件之间重用非 U I功能，我们建议将其提取到单独的 JavaScript 模块中。组件可以导入它并使用该函数，对象或类，而不扩展它。</p>]]></content>
    
    <summary type="html">
    
      通过研究React v16.2.0文档，提取出其中的重点知识，并加入自己的理解，是一篇适于初学者了解、查询的React入门总结。（其中涉及ES6语法）
    
    </summary>
    
    
      <category term="JS" scheme="https://miaoq.github.io/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>SQL必知必会主要内容</title>
    <link href="https://miaoq.github.io/2018/05/13/DB-2018-05-13-SQL/"/>
    <id>https://miaoq.github.io/2018/05/13/DB-2018-05-13-SQL/</id>
    <published>2018-05-13T02:05:58.000Z</published>
    <updated>2019-04-09T08:53:54.959Z</updated>
    
    <content type="html"><![CDATA[<h3 id="简单入门"><a href="#简单入门" class="headerlink" title="简单入门"></a>简单入门</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_id </span><br><span class="line"><span class="keyword">FROM</span> Products;</span><br><span class="line"><span class="comment">--输出prod_id列</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_id, prod_name </span><br><span class="line"><span class="keyword">FROM</span> Products;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> Products ;</span><br><span class="line"><span class="comment">--输出所有列</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> prod_id </span><br><span class="line"><span class="keyword">FROM</span> Products;</span><br><span class="line"><span class="comment">--输出prod_id不同的列</span></span><br></pre></td></tr></table></figure><hr><p>检索前5行，各数据库有差异:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> TOP <span class="number">5</span> prod_id </span><br><span class="line"><span class="keyword">FROM</span> Products;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_id </span><br><span class="line"><span class="keyword">FROM</span> Products </span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">ROWNUM</span> &lt;= <span class="number">5</span>;</span><br><span class="line"><span class="comment">--oraCal</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_id </span><br><span class="line"><span class="keyword">FORM</span> Products <span class="keyword">LIMIT</span> <span class="number">5</span>;</span><br><span class="line"><span class="comment">--输出5行</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_id </span><br><span class="line"><span class="keyword">FROM</span> Products </span><br><span class="line"><span class="keyword">LIMIT</span> <span class="number">5</span> <span class="keyword">OFFSET</span> <span class="number">10</span>;</span><br><span class="line"><span class="comment">--从第10行开始，输出5行</span></span><br></pre></td></tr></table></figure><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">--行内注释的一种方式</span><br><span class="line"></span><br><span class="line">#行内注释的另一种方式</span><br><span class="line"></span><br><span class="line">/*   */块级注释</span><br></pre></td></tr></table></figure><hr><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_name </span><br><span class="line"><span class="keyword">FROM</span> Products </span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> prod_name;</span><br><span class="line"><span class="comment">--按字母顺序排序</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_id, prod_name, prod_price </span><br><span class="line"><span class="keyword">FROM</span> Products </span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> prod_price, prod_name;</span><br><span class="line"><span class="comment">--按多列排序</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_id, prod_name, prod_price </span><br><span class="line"><span class="keyword">FROM</span> Products </span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="number">2</span>, <span class="number">3</span>;</span><br><span class="line"><span class="comment">--按相对列排序（此处下标从1开始）</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_id, prod_name, prod_price </span><br><span class="line"><span class="keyword">FROM</span> Products </span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> prod_price <span class="keyword">DESC</span>;</span><br><span class="line"><span class="comment">--按降序排列，价格从高到低</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_id, prod_name, prod_price </span><br><span class="line"><span class="keyword">FROM</span> Products </span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> prod_price <span class="keyword">DESC</span>, prod_name;</span><br><span class="line"><span class="comment">--按降序排列，价格从高到低，name还是按字母升序排列</span></span><br></pre></td></tr></table></figure><hr><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_name, prod_price </span><br><span class="line"><span class="keyword">FROM</span> Producs </span><br><span class="line"><span class="keyword">WHERE</span> prod_price = <span class="number">3.49</span>;</span><br></pre></td></tr></table></figure><p>同时使用WHERE和ORDER BY时，ORDER BY应放在WHERE之后</p><hr><h3 id="WHERE子句操作符"><a href="#WHERE子句操作符" class="headerlink" title="WHERE子句操作符"></a>WHERE子句操作符</h3><table><thead><tr><th>操作符</th><th>说明</th></tr></thead><tbody><tr><td>=</td><td>等于</td></tr><tr><td>&lt;&gt;</td><td>不等于</td></tr><tr><td>!&lt;=</td><td>不等于</td></tr><tr><td>&lt;</td><td>小于</td></tr><tr><td>&lt;=</td><td>小于等于</td></tr><tr><td>!</td><td>不小于</td></tr><tr><td>&gt;</td><td>大于</td></tr><tr><td>&gt;=</td><td>大于等于</td></tr><tr><td>!&gt;</td><td>不大于</td></tr><tr><td>BETWEEN</td><td>在指定的两个值之间</td></tr><tr><td>IS NULL</td><td>为NULL值</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_name, prod_price </span><br><span class="line"><span class="keyword">FROM</span> Products </span><br><span class="line"><span class="keyword">WHERE</span> prod_price &lt; <span class="number">10</span>;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> vent_id, prod_name </span><br><span class="line"><span class="keyword">FROM</span> Products </span><br><span class="line"><span class="keyword">WHERE</span> vent_id &lt;&gt; <span class="string">'DLL01'</span>;</span><br></pre></td></tr></table></figure><p>单引号用来限定字符串，如果将值与字符串比较就需要用单引号包起来，如果与数值比较就不需要。我觉得最好就都包呗~</p><p>有&lt;&gt;和!=是因为DBMS支持上的差异</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_name, prod_price</span><br><span class="line"><span class="keyword">FROM</span> Products</span><br><span class="line"><span class="keyword">WHERE</span> prod_price <span class="keyword">BETWEEN</span> <span class="number">5</span> <span class="keyword">AND</span> <span class="number">10</span>;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_name</span><br><span class="line"><span class="keyword">FROM</span> Products</span><br><span class="line"><span class="keyword">WHERE</span> prod_price <span class="keyword">IS</span> <span class="literal">NULL</span>;</span><br><span class="line"><span class="comment">--空值</span></span><br></pre></td></tr></table></figure><hr><h3 id="组合WHERE子句"><a href="#组合WHERE子句" class="headerlink" title="组合WHERE子句"></a>组合WHERE子句</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_id, prod_price, prod_name</span><br><span class="line"><span class="keyword">FROM</span> Products</span><br><span class="line"><span class="keyword">WHERE</span> vend_id = <span class="string">'DLL01'</span> <span class="keyword">AND</span> prod_price &lt;= <span class="number">4</span>;</span><br><span class="line"><span class="comment">--可以加好多个AND</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_name, prod_price</span><br><span class="line"><span class="keyword">FROM</span> Products</span><br><span class="line"><span class="keyword">WHERE</span> vend_id = <span class="string">'DLL01'</span> <span class="keyword">OR</span> vend_id = ‘BRS01’;</span><br><span class="line"><span class="comment">--如果OR前面的为true，则一定会打印</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_name, prod_price</span><br><span class="line"><span class="keyword">FROM</span> Products</span><br><span class="line"><span class="keyword">WHERE</span> (vend_id = <span class="string">'DLL01'</span> <span class="keyword">OR</span> vend_id = ‘BRS01’) <span class="keyword">AND</span> prod_price &gt;= <span class="number">10</span>;</span><br><span class="line"><span class="comment">--AND优先级高于OR</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_name, prod_price </span><br><span class="line"><span class="keyword">FROM</span> Products</span><br><span class="line"><span class="keyword">WHERE</span> vend_id <span class="keyword">IN</span> ( <span class="string">'DLL01'</span>, <span class="string">'BRS01'</span> ) </span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> prod_name;</span><br><span class="line"><span class="comment">--IN操作符完成了与OR一样的功能，但是更简洁，直观</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_name</span><br><span class="line"><span class="keyword">FROM</span> Products</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">NOT</span> vend_id = <span class="string">'DLL01'</span> </span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> prod_name;</span><br><span class="line"><span class="comment">--NOT操作符否定其后跟的任何条件</span></span><br></pre></td></tr></table></figure><hr><h3 id="使用通配符过滤"><a href="#使用通配符过滤" class="headerlink" title="使用通配符过滤"></a>使用通配符过滤</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_id, prod_name </span><br><span class="line"><span class="keyword">FROM</span> Products</span><br><span class="line"><span class="keyword">WHERE</span> prod_name <span class="keyword">LIKE</span> <span class="string">'Fish%'</span>;</span><br><span class="line"><span class="comment">--LIKE操作符</span></span><br><span class="line"><span class="comment">--%通配符代表搜索模式中给定位置的0个、1个或多个字符（除NULL外）（Access使用*）</span></span><br><span class="line"><span class="comment">--找出所有以词Fish起头的产品</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_id, prod_name</span><br><span class="line"><span class="keyword">FROM</span> Products</span><br><span class="line"><span class="keyword">WHERE</span> prod_name <span class="keyword">LIKE</span> <span class="string">'%bean bag%'</span>;</span><br><span class="line"><span class="comment">--可以使用任意个%</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_id, prod_name</span><br><span class="line"><span class="keyword">FROM</span> Products</span><br><span class="line"><span class="keyword">WHERE</span> prod_name <span class="keyword">LIKE</span> <span class="string">'_ inch teddy bear'</span>;</span><br><span class="line"><span class="comment">--_通配符只匹配单个字符，可以使用多个_（Access使用?）</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> cust_contact</span><br><span class="line"><span class="keyword">FROM</span> Customers</span><br><span class="line"><span class="keyword">WHERE</span> cust_contact <span class="keyword">LIKE</span> <span class="string">'[JM]%'</span> </span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> cust_contact;</span><br><span class="line"><span class="comment">--[JM]匹配任何以方括号中字母(J或者M)开头的联系人名,它也只能匹配单个字符</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> cust_contact</span><br><span class="line"><span class="keyword">FROM</span> Customers</span><br><span class="line"><span class="keyword">WHERE</span> cust_contact <span class="keyword">LIKE</span> <span class="string">'[^JM]%'</span> </span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> cust_contact;</span><br><span class="line"><span class="comment">--^脱字号匹配不以J或M起头的任意联系人名</span></span><br></pre></td></tr></table></figure><p>通配符搜索一般比前面讨论的其他搜索要耗费更长的处理时间：</p><ul><li>不要过度使用通配符，如果其它操作符能达到目的，就使用其它操作符</li><li>尽量不要用在搜索模式的开始处，用在开始处是最慢的</li></ul><hr><h3 id="创建计算字段"><a href="#创建计算字段" class="headerlink" title="创建计算字段"></a>创建计算字段</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">RTRIM</span>(vend_name) + <span class="string">' ('</span> + <span class="keyword">RTRIM</span>(vend_country) + <span class="string">')'</span> <span class="keyword">FROM</span> Vendors</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> vend_name;</span><br><span class="line"><span class="comment">--拼接两列，+或者||（各数据库有差别）</span></span><br><span class="line"><span class="comment">--RTRIM去掉右边空格</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">RTRIM</span>(vend_name) + <span class="string">' ('</span> + <span class="keyword">RTRIM</span>(vend_country) + <span class="string">')'</span> <span class="keyword">AS</span> vend_title</span><br><span class="line"><span class="keyword">FROM</span> Vendors</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> vend_name;</span><br><span class="line"><span class="comment">--AS后面是合并后的新列的名称（别名Alias）</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_id, quantity, item_price,</span><br><span class="line">quantity*item_price <span class="keyword">AS</span> expanded_price </span><br><span class="line"><span class="keyword">FROM</span> OrderItems</span><br><span class="line"><span class="keyword">WHERE</span> order_num = <span class="number">20008</span>;</span><br><span class="line"><span class="comment">--输出中显示的expanded_price列是一个计算字段,此计算为quantity*item_price</span></span><br></pre></td></tr></table></figure><p>SELECT语句为测试、检验函数和计算提供了很好的方法。虽然SELECT通常用于从表中检索数据,但是省略了FROM子句后就是简单地访问 和处理表达式,例如SELECT 3 * 2;将返回6,SELECT Trim(‘ abc ‘);将返回abc,SELECT Now();使用Now()函数返回当前日期和时间。现在 你明白了,可以根据需要使用SELECT语句进行检验。</p><hr><h3 id="使用数据处理函数"><a href="#使用数据处理函数" class="headerlink" title="使用数据处理函数"></a>使用数据处理函数</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> vend_name, <span class="keyword">UPPER</span>(vend_name) <span class="keyword">AS</span> vend_name_upcase </span><br><span class="line"><span class="keyword">FROM</span> Vendors</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> vend_name;</span><br><span class="line"><span class="comment">--UPPER()函数将文本转换为大写（这里列出了两列，原来的和转换后的）</span></span><br></pre></td></tr></table></figure><p>常用的文本处理函数：</p><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td>LEFT()(或使用子字符串函数)</td><td>返回字符串左边的字符</td></tr><tr><td>LENGTH()(也使用DATALENGTH()或LEN())</td><td>返回字符串的长度</td></tr><tr><td>LOWER()(Access使用LCASE())</td><td>将字符串转换为小写</td></tr><tr><td>LTRIM()</td><td>去掉字符串左边的空格</td></tr><tr><td>RIGHT()(或使用子字符串函数)</td><td>去掉字符串右边的空格</td></tr><tr><td>RTRIM()</td><td>去掉字符串右边的空格</td></tr><tr><td>SOUNDEX()</td><td>返回字符串的SOUNDEX值</td></tr><tr><td>UPPER()(Access使用UCASE())</td><td>将字符串转换为大写</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> cust_name, cust_contact</span><br><span class="line"><span class="keyword">FROM</span> Customers</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">SOUNDEX</span>(cust_contact) = <span class="keyword">SOUNDEX</span>(<span class="string">'Michael Green'</span>);</span><br><span class="line"><span class="comment">--SOUNDEX发音类似函数（神奇！）</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> order_num</span><br><span class="line"><span class="keyword">FROM</span> Orders</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">DATEPART</span>(yy, order_date) = <span class="number">2012</span>;</span><br><span class="line"><span class="comment">--DATEPART检索日期的函数（还有其它版本）</span></span><br></pre></td></tr></table></figure><p>数值处理函数：</p><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td>ABS()</td><td>返回一个数的绝对值</td></tr><tr><td>COS()</td><td>返回一个角度的余弦</td></tr><tr><td>EXP()</td><td>返回一个数的指数值</td></tr><tr><td>PI()</td><td>返回圆周率</td></tr><tr><td>SIN()</td><td>返回一个角度的正弦</td></tr><tr><td>SQRT()</td><td>返回一个数的平方根</td></tr><tr><td>TAN()</td><td>返回一个角度的正切</td></tr></tbody></table><hr><h3 id="聚集函数"><a href="#聚集函数" class="headerlink" title="聚集函数"></a>聚集函数</h3><p>对某些行运行的函数,计算并返回一个值</p><p>我们经常需要汇总数据而不用把它们实际检索出来</p><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td>AVG()</td><td>返回某列的平均值</td></tr><tr><td>COUNT()</td><td>返回某列的行数</td></tr><tr><td>MAX()</td><td>返回某列的最大值</td></tr><tr><td>MIN()</td><td>返回某列的最小值</td></tr><tr><td>SUM()</td><td>返回某列之和</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">AVG</span>(prod_price) <span class="keyword">AS</span> avg_price </span><br><span class="line"><span class="keyword">FROM</span> Products</span><br><span class="line"><span class="keyword">WHERE</span> vend_id = <span class="string">'DLL01'</span>;</span><br><span class="line"><span class="comment">/*  </span></span><br><span class="line"><span class="comment">AVG()可用来返回所有列的平均值,也可以用来返回特定列或行的平均值.</span></span><br><span class="line"><span class="comment">要获得多个列的平均值,必须使用多个AVG()函数</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(cust_email) <span class="keyword">AS</span> num_cust </span><br><span class="line"><span class="keyword">FROM</span> Customers;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">如果指定列名,则COUNT()函数会忽略指定列的值为空的行,</span></span><br><span class="line"><span class="comment">但如果COUNT()函数中用的是星号(*),则不忽略</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">MAX</span>(prod_price) <span class="keyword">AS</span> max_price </span><br><span class="line"><span class="keyword">FROM</span> Products;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">虽然MAX()一般用来找出最大的数值或日期值,</span></span><br><span class="line"><span class="comment">但许多(并非所有)DBMS允许将它用来返回任意列中的最大值,</span></span><br><span class="line"><span class="comment">包括返回文本列中的最大 值。在用于文本数据时,</span></span><br><span class="line"><span class="comment">MAX()返回按该列排序后的最后一行(MIN()与其相反)。</span></span><br><span class="line"><span class="comment">MAX()/MIN()函数忽略列值为NULL的行。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">SUM</span>(item_price*quantity) <span class="keyword">AS</span> total_price </span><br><span class="line"><span class="keyword">FROM</span> OrderItems</span><br><span class="line"><span class="keyword">WHERE</span> order_num = <span class="number">20005</span>;</span><br><span class="line"><span class="comment">--SUM()函数忽略列值为NULL的行</span></span><br><span class="line"><span class="comment">--如本例所示，所有聚集函数都可以用来执行多个列以上的运算</span></span><br></pre></td></tr></table></figure><p>以上5个聚集函数都可以如下使用:</p><ul><li>对所有行执行计算,指定A LL参数或不指定参数(因为A LL是默认行为)。</li><li>只包含不同的值,指定DISTINCT参数</li></ul><p>提示:ALL为默认，无需指定</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">AVG</span>(<span class="keyword">DISTINCT</span> prod_price) <span class="keyword">AS</span> avg_price </span><br><span class="line"><span class="keyword">FROM</span> Products</span><br><span class="line"><span class="keyword">WHERE</span> vend_id = <span class="string">'DLL01'</span>;</span><br><span class="line"><span class="comment">--警告:DISTINCT不能用于COUNT(*)</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line"><span class="keyword">COUNT</span>(*) <span class="keyword">AS</span> num_items, </span><br><span class="line"><span class="keyword">MIN</span>(prod_price) <span class="keyword">AS</span> price_min, </span><br><span class="line"><span class="keyword">MAX</span>(prod_price) <span class="keyword">AS</span> price_max, </span><br><span class="line"><span class="keyword">AVG</span>(prod_price) <span class="keyword">AS</span> price_avg</span><br><span class="line"><span class="keyword">FROM</span> Products;</span><br><span class="line"><span class="comment">--组合使用聚集函数</span></span><br></pre></td></tr></table></figure><hr><h3 id="分组数据"><a href="#分组数据" class="headerlink" title="分组数据"></a>分组数据</h3><p>两个新SELECT语句子句：创建分组GROUP BY子句和过滤分组HAVING子句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> vend_id, <span class="keyword">COUNT</span>(*) <span class="keyword">AS</span> num_prods </span><br><span class="line"><span class="keyword">FROM</span> Products</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> vend_id;</span><br><span class="line"><span class="comment">--GROUP BY会对每个vend_id而不是整个表计算num_prods一次</span></span><br></pre></td></tr></table></figure><p>GROUP BY的一些规定：</p><ul><li>GROUP BY子句可以包含任意数目的列,因而可以对分组进行嵌套,更细致地进行数据分组</li><li>如果在GROUP BY子句中嵌套了分组,数据将在最后指定的分组上进行汇总。换句话说,在建立分组时,指定的所有列都一起计算(所以 不能从个别的列取回数据)</li><li>如果在GROUP BY子句中嵌套了分组,数据将在最后指定的分组上进行汇总。换句话说,在建立分组时,指定的所有列都一起计算(所以 不能从个别的列取回数据)</li><li>大多数SQL实现不允许GROUP BY列带有长度可变的数据类型(如文本或备注型字段)</li><li>除聚集计算语句外,SELECT语句中的每一列都必须在GROUP BY子句中给出</li><li>如果分组列中包含具有NULL值的行,则NULL将作为一个分组返回。如果列中有多行NULL值,它们将分为一组</li><li>GROUP BY子句必须出现在WHERE子句之后,ORDER BY子句之前</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> cust_id, <span class="keyword">COUNT</span>(*) <span class="keyword">AS</span> orders </span><br><span class="line"><span class="keyword">FROM</span> Orders</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> cust_id</span><br><span class="line"><span class="keyword">HAVING</span> <span class="keyword">COUNT</span>(*) &gt;= <span class="number">2</span>;</span><br><span class="line"><span class="comment">--HAVING过滤COUNT(*) &gt;= 2(两个以上订单)的那些分组</span></span><br></pre></td></tr></table></figure><!--tip: markdown换行：空格 空格 + 回车--><!--也可以用html的<br>，额，注释懒得去搜了，就用html的吧--><p>HAVING和WHERE的差别：<br>WHERE在数据分组前进行过滤,HA VING在数据分组后进行过滤。这是一个重要的区别,WHERE排除的行不包括在分组中。这可能会改变计算值,从而影响HA VING子句中基于这些值过滤掉的分组.使用HAVING时应 该结合GROUP BY子句,而WHERE子句用于标准的行级过滤。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> vend_id, <span class="keyword">COUNT</span>(*) <span class="keyword">AS</span> num_prods <span class="keyword">FROM</span> Products</span><br><span class="line"><span class="keyword">WHERE</span> prod_price &gt;= <span class="number">4</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> vend_id</span><br><span class="line"><span class="keyword">HAVING</span> <span class="keyword">COUNT</span>(*) &gt;= <span class="number">2</span>;</span><br></pre></td></tr></table></figure><hr><p>分组和排序：ORDER BY与GROUP BY</p><table><thead><tr><th>ORDER BY</th><th>GROUP BY</th></tr></thead><tbody><tr><td>对产生的输出排序</td><td>对行分组，但输出可能不是分组的排序</td></tr><tr><td>任意列（甚至非选择的列）都可以使用</td><td>只可能使用选择列或表达式列,而且必须使用每个选择列表达式</td></tr><tr><td>不一定需要</td><td>如果与聚集函数一起使用列（或表达式），则必须使用</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> order_num, <span class="keyword">COUNT</span>(*) <span class="keyword">AS</span> items </span><br><span class="line"><span class="keyword">FROM</span> OrderItems</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> order_num</span><br><span class="line"><span class="keyword">HAVING</span> <span class="keyword">COUNT</span>(*) &gt;= <span class="number">3</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> items, order_num;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">在这个例子中,使用GROUP BY子句按订单号(order_num列)分组数据,</span></span><br><span class="line"><span class="comment">以便COUNT(*)函数能够返回每个订单中的物品数目。</span></span><br><span class="line"><span class="comment">HAVING子句过滤数据,使得只返回包含三个或更多物品的订单。</span></span><br><span class="line"><span class="comment">最后,用ORDER BY子句排序输出。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><hr><p>SELECT子句顺序</p><table><thead><tr><th>字句</th><th>说明</th><th>是否必须使用</th></tr></thead><tbody><tr><td>SELECT</td><td>要返回的列表或表达式</td><td>是</td></tr><tr><td>FROM</td><td>从中检索数据的表</td><td>仅在从表中检索数据时使用</td></tr><tr><td>WHERE</td><td>行级过滤</td><td>否</td></tr><tr><td>GROUP BY</td><td>分组说明</td><td>仅在按组计算聚集时使用</td></tr><tr><td>HAVING</td><td>组级过滤</td><td>否</td></tr><tr><td>ORDER BY</td><td>输出排序顺序</td><td>否</td></tr></tbody></table><hr><h3 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> cust_id</span><br><span class="line"><span class="keyword">FROM</span> Orders</span><br><span class="line"><span class="keyword">WHERE</span> order_num <span class="keyword">IN</span> </span><br><span class="line">    (<span class="keyword">SELECT</span> cust_id</span><br><span class="line"><span class="keyword">FROM</span> Orders</span><br><span class="line"><span class="keyword">WHERE</span> order_num <span class="keyword">IN</span> (<span class="keyword">SELECT</span> order_num</span><br><span class="line"><span class="keyword">FROM</span> OrderItems</span><br><span class="line"><span class="keyword">WHERE</span> prod_id = <span class="string">'RGAN01'</span>);</span><br><span class="line">    FROM OrderItems</span><br><span class="line">    WHERE prod_id = 'RGAN01');</span><br><span class="line"><span class="comment">--从内向外处理，先SELECT order_num...</span></span><br></pre></td></tr></table></figure><hr><h3 id="联结表"><a href="#联结表" class="headerlink" title="联结表"></a>联结表</h3><p>创建联结:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> vend_name, prod_name, prod_price </span><br><span class="line"><span class="keyword">FROM</span> Vendors, Products</span><br><span class="line"><span class="keyword">WHERE</span> Vendors.vend_id = Products.vend_id;</span><br><span class="line"><span class="comment">--WHERE子句指示DBMS将Vendors表中的vend_id与Products表中的vend_id匹配起来</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> vend_name, prod_name, prod_price </span><br><span class="line"><span class="keyword">FROM</span> Vendors <span class="keyword">INNER</span> <span class="keyword">JOIN</span> Products</span><br><span class="line"><span class="keyword">ON</span> Vendors.vend_id = Products.vend_id;</span><br><span class="line"><span class="comment">--联结条件用特定的ON子句给出</span></span><br></pre></td></tr></table></figure><p>联结多个表：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_name, vend_name, prod_price, quantity </span><br><span class="line"><span class="keyword">FROM</span> OrderItems, Products, Vendors</span><br><span class="line"><span class="keyword">WHERE</span> Products.vend_id = Vendors.vend_id</span><br><span class="line"><span class="keyword">AND</span> OrderItems.prod_id = Products.prod_id </span><br><span class="line"><span class="keyword">AND</span> order_num = <span class="number">20007</span>;</span><br><span class="line"><span class="comment">--不要联结不必要的表，非常耗资源</span></span><br></pre></td></tr></table></figure><hr><h3 id="高级联结"><a href="#高级联结" class="headerlink" title="高级联结"></a>高级联结</h3><p>使用表别名：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> cust_name, cust_contact</span><br><span class="line"><span class="keyword">FROM</span> Customers <span class="keyword">AS</span> C, Orders <span class="keyword">AS</span> O, OrderItems <span class="keyword">AS</span> OI </span><br><span class="line"><span class="keyword">WHERE</span> C.cust_id = O.cust_id</span><br><span class="line"><span class="keyword">AND</span> OI.order_num = O.order_num <span class="keyword">AND</span> prod_id = <span class="string">'RGAN01'</span>;</span><br><span class="line"><span class="comment">--缩短SQL语句</span></span><br><span class="line"><span class="comment">--允许在一条SELECT语句中多次使用相同的表</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> C.*, O.order_num, O.order_date, OI.prod_id, OI.quantity, OI.item_price</span><br><span class="line"><span class="keyword">FROM</span> Customers <span class="keyword">AS</span> C, Orders <span class="keyword">AS</span> O, OrderItems <span class="keyword">AS</span> OI </span><br><span class="line"><span class="keyword">WHERE</span> C.cust_id = O.cust_id </span><br><span class="line"><span class="keyword">AND</span> OI.order_num = O.order_num </span><br><span class="line"><span class="keyword">AND</span> prod_id = <span class="string">'RGAN01'</span>;</span><br><span class="line"><span class="comment">--自然联结</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Customers.cust_id, Orders.order_num </span><br><span class="line"><span class="keyword">FROM</span> Customers </span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> Orders</span><br><span class="line"><span class="keyword">ON</span> Customers.cust_id = Orders.cust_id;</span><br><span class="line"><span class="comment">--内联结</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Customers.cust_id, Orders.order_num </span><br><span class="line"><span class="keyword">FROM</span> Customers </span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> Orders</span><br><span class="line"><span class="keyword">ON</span> Customers.cust_id = Orders.cust_id;</span><br><span class="line"><span class="comment">--外联结</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Customers.cust_id, <span class="keyword">COUNT</span>(Orders.order_num) <span class="keyword">AS</span> num_ord</span><br><span class="line"><span class="keyword">FROM</span> Customers </span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> Orders <span class="keyword">ON</span> Customers.cust_id = Orders.cust_id</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> Customers.cust_id;</span><br><span class="line"><span class="comment">--带聚集函数的联结</span></span><br></pre></td></tr></table></figure><hr><h3 id="创建组合查询"><a href="#创建组合查询" class="headerlink" title="创建组合查询"></a>创建组合查询</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> cust_name, cust_contact, cust_email </span><br><span class="line"><span class="keyword">FROM</span> Customers</span><br><span class="line"><span class="keyword">WHERE</span> cust_state <span class="keyword">IN</span> (<span class="string">'IL'</span>,<span class="string">'IN'</span>,<span class="string">'MI'</span>)</span><br><span class="line"><span class="keyword">UNION</span></span><br><span class="line"><span class="keyword">SELECT</span> cust_name, cust_contact, cust_email </span><br><span class="line"><span class="keyword">FROM</span> Customers</span><br><span class="line"><span class="keyword">WHERE</span> cust_name = <span class="string">'Fun4All'</span>;</span><br><span class="line"><span class="comment">--UNION与使用多条WHERE子句相同，如下个例子</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> cust_name, cust_contact, cust_email </span><br><span class="line"><span class="keyword">FROM</span> Customers</span><br><span class="line"><span class="keyword">WHERE</span> cust_state <span class="keyword">IN</span> (<span class="string">'IL'</span>,<span class="string">'IN'</span>,<span class="string">'MI'</span>) <span class="keyword">OR</span> cust_name = <span class="string">'Fun4All'</span>;</span><br><span class="line"><span class="comment">--参照例子，多个WHERE子句</span></span><br></pre></td></tr></table></figure><p>UNION规则</p><ul><li>UNION必须由两条或两条以上的SELECT语句组成,语句之间用关键字UNION分隔(因此,如果组合四条SELECT语句,将要使用三 个UNION关键字)</li><li>UNION中的每个查询必须包含相同的列、表达式或聚集函数(不过,各个列不需要以相同的次序列出)</li><li>列数据类型必须兼容:类型不必完全相同,但必须是DBMS可以隐含转换的类型(例如,不同的数值类型或不同的日期类型)</li></ul><p>使用UNION时,重复的行会被自动取消,如果想返回所有的匹配行,可使用UNION ALL;<br>在用UNION组合查询时,只能使用一条ORDER BY子句,它必须位于最后一条SELECT语句之后</p><hr><h3 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h3><p>INSERT用来将行插入(或添加)到数据库表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> Customers <span class="keyword">VALUES</span>(<span class="string">'1000000006'</span>,</span><br><span class="line"><span class="string">'Toy Land'</span>,</span><br><span class="line"><span class="string">'123 Any Street'</span>, <span class="string">'New York'</span>,</span><br><span class="line"><span class="string">'NY'</span>,</span><br><span class="line"><span class="string">'11111'</span>,</span><br><span class="line"><span class="string">'USA'</span>,</span><br><span class="line"><span class="literal">NULL</span>,</span><br><span class="line"><span class="literal">NULL</span>);</span><br><span class="line"><span class="comment">--插入完整的行</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> Customers(cust_id, cust_name,</span><br><span class="line">cust_address, cust_city, cust_state, cust_zip, cust_country, cust_contact, cust_email)</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="string">'1000000006'</span>, <span class="string">'Toy Land'</span>,</span><br><span class="line"><span class="string">'123 Any Street'</span>, <span class="string">'New York'</span>,</span><br><span class="line"><span class="string">'NY'</span>,</span><br><span class="line"><span class="string">'11111'</span>,</span><br><span class="line"><span class="string">'USA'</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line"><span class="comment">--给出了列名虽然繁琐，但是更安全，可以打乱顺序，还可以只插入部分行</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> Customers(cust_id, cust_contact,</span><br><span class="line">cust_email, cust_name, cust_address, cust_city, cust_state, cust_zip, cust_country)</span><br><span class="line"><span class="keyword">SELECT</span> cust_id,</span><br><span class="line">cust_contact, cust_email, cust_name, cust_address, cust_city, cust_state, cust_zip, cust_country</span><br><span class="line"><span class="keyword">FROM</span> CustNew;</span><br><span class="line"><span class="comment">--插入检索出的数据（将SELECT语句的结果插入表中）</span></span><br></pre></td></tr></table></figure><p>INSERT通常只插入一行。要插入多行,必须执行多个INSERT语句。INSERT SELECT是个例外,它可以用一条INSERT插入多行,不 管SELECT语句返回多少行,都将被INSERT插入。</p><hr><p>从一个表复制到另一个表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> *</span><br><span class="line"><span class="keyword">INTO</span> CustCopy </span><br><span class="line"><span class="keyword">FROM</span> Customers;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">这条SELECT语句创建一个名为CustCopy的新表,</span></span><br><span class="line"><span class="comment">并把Customers表的整个内容复制到新表中。</span></span><br><span class="line"><span class="comment">因为这里使用的是SELECT *,</span></span><br><span class="line"><span class="comment">所以将在CustCopy表中创建(并填充)与Customers表的每一列相同的列。</span></span><br><span class="line"><span class="comment">要想只复制部分的列,可以明确给出列名,而不是使用*通配符。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>使用SELECT INTO时:</p><ul><li>任何SELECT选项和子句都可以使用,包括WHERE和GROUP BY</li><li>可利用联结从多个表插入数据</li><li>不管从多少个表中检索数据,数据都只能插入到一个表中</li></ul><hr><h3 id="更新和删除数据"><a href="#更新和删除数据" class="headerlink" title="更新和删除数据"></a>更新和删除数据</h3><p>UPDATE和DELETE</p><p>注意安全</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> Customers</span><br><span class="line"><span class="keyword">SET</span> cust_contact = <span class="string">'Sam Roberts'</span>,</span><br><span class="line">cust_email = <span class="string">'sam@toyland.com'</span> </span><br><span class="line"><span class="keyword">WHERE</span> cust_id = <span class="string">'1000000006'</span>;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> Customers</span><br><span class="line"><span class="keyword">SET</span> cust_email = <span class="literal">NULL</span></span><br><span class="line"><span class="keyword">WHERE</span> cust_id = <span class="string">'1000000005'</span>;</span><br><span class="line"><span class="comment">--要删除某个列的值,可设置它为NULL</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> Customers </span><br><span class="line"><span class="keyword">WHERE</span> cust_id = <span class="string">'1000000006'</span>;</span><br><span class="line"><span class="comment">--删除一行，即使删除了所有行，也不删除表</span></span><br><span class="line"><span class="comment">--删除所有行,可使用TRUNCATE TABLE语句,速度更快</span></span><br></pre></td></tr></table></figure><p>更新和删除的指导原则:</p><ul><li>除非确实打算更新和删除每一行,否则绝对不要使用不带WHERE子句的UPDA TE或DELETE语句</li><li>保证每个表都有主键，尽可能像WHERE子句那样使用它</li><li>在UPDA TE或DELETE语句使用WHERE子句前,应该先用SELECT进行测试,保证它过滤的是正确的记录,以防编写的WHERE子句不正确</li><li>使用强制实施引用完整性的数据库</li><li>有的DBMS允许数据库管理员施加约束,防止执行不带WHERE子句的UPDA TE或DELETE语句。如果所采用的DBMS支持这个特性,应该使用它</li></ul><hr><h3 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Products (</span><br><span class="line">prod_id  <span class="built_in">CHAR</span>(<span class="number">10</span>)  <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">vend_id  <span class="built_in">CHAR</span>(<span class="number">10</span>)  <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">prod_name  <span class="built_in">CHAR</span>(<span class="number">254</span>)  <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">prod_price  <span class="built_in">DECIMAL</span>(<span class="number">8</span>,<span class="number">2</span>)  <span class="keyword">NOT</span> <span class="literal">NULL</span>  <span class="keyword">DEFAULT</span> <span class="number">1</span>,,</span><br><span class="line">prod_desc <span class="built_in">VARCHAR</span>(<span class="number">1000</span>) <span class="literal">NULL</span></span><br><span class="line"><span class="comment">--缺省时，使用默认值</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>允许NULL值的列也允许在插入行时不给出该列的值<br>不允许NULL值的列不接受没有列值的行</p><hr><p>更新表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> Vendors</span><br><span class="line"><span class="keyword">ADD</span> vend_phone <span class="built_in">CHAR</span>(<span class="number">20</span>);</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> Vendors </span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">COLUMN</span> vend_phone;</span><br></pre></td></tr></table></figure><p>使用ALTER TABLE要极为小心,应该在进行改动前做完整的备份(模式和数据的备份)。数据库表的更改不能撤销,如果增加了不需要的 列,也许无法删除它们。类似地,如果删除了不应该删除的列,可能会丢失该列中的所有数据。</p><hr><p>删除表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> CustCopy;</span><br></pre></td></tr></table></figure><hr><h3 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> ProductCustomers </span><br><span class="line"><span class="keyword">AS</span> <span class="keyword">SELECT</span> cust_name, cust_contact, prod_id </span><br><span class="line"><span class="keyword">FROM</span> Customers, Orders, OrderItems </span><br><span class="line"><span class="keyword">WHERE</span> Customers.cust_id = Orders.cust_id</span><br><span class="line"><span class="keyword">AND</span> OrderItems.order_num = Orders.order_num;</span><br><span class="line"><span class="comment">--创建视图</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> cust_name, cust_contact </span><br><span class="line"><span class="keyword">FROM</span> ProductCustomers</span><br><span class="line"><span class="keyword">WHERE</span> prod_id = <span class="string">'RGAN01'</span>;</span><br><span class="line"><span class="comment">--使用视图</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> VendorLocations <span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">RTRIM</span>(vend_name) + <span class="string">' ('</span> + <span class="keyword">RTRIM</span>(vend_country) + <span class="string">')'</span></span><br><span class="line"><span class="keyword">AS</span> vend_title </span><br><span class="line"><span class="keyword">FROM</span> Vendors;</span><br><span class="line"><span class="comment">--用视图重新格式化检索出的数据</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> CustomerEMailList </span><br><span class="line"><span class="keyword">AS</span> <span class="keyword">SELECT</span> cust_id, cust_name, cust_email </span><br><span class="line"><span class="keyword">FROM</span> Customers</span><br><span class="line"><span class="keyword">WHERE</span> cust_email <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>;</span><br><span class="line"><span class="comment">--用视图过滤不想要的数据</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> OrderItemsExpanded </span><br><span class="line"><span class="keyword">AS</span> <span class="keyword">SELECT</span> order_num,</span><br><span class="line">prod_id,</span><br><span class="line">quantity,</span><br><span class="line">item_price,</span><br><span class="line">quantity*item_price <span class="keyword">AS</span> expanded_price</span><br><span class="line"><span class="keyword">FROM</span> OrderItems;</span><br><span class="line"><span class="comment">--使用视图与计算字段</span></span><br></pre></td></tr></table></figure><p>视图为虚拟的表。它们包含的不是数据而是根据需要检索数据的查询。视图提供了一种封装SELECT语句的层次,可用来简化数据处理,重新格 式化或保护基础数据。</p><hr><h3 id="使用存储过程"><a href="#使用存储过程" class="headerlink" title="使用存储过程"></a>使用存储过程</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">EXECUTE</span> AddNewProduct( <span class="string">'JTS01'</span>, <span class="string">'Stuffed Eiffel Tower'</span>,</span><br><span class="line"><span class="number">6.49</span>,</span><br><span class="line"><span class="string">'Plush stuffed toy with the text La ➥Tour Eiffel in red white and blue'</span> );</span><br><span class="line"><span class="comment">--执行存储过程</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> MailingListCount ( ListCount <span class="keyword">OUT</span> <span class="built_in">INTEGER</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">IS</span> v_rows <span class="built_in">INTEGER</span>; </span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(*) <span class="keyword">INTO</span> v_rows </span><br><span class="line"><span class="keyword">FROM</span> Customers</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">NOT</span> cust_email <span class="keyword">IS</span> <span class="literal">NULL</span>; ListCount := v_rows;</span><br><span class="line"><span class="keyword">END</span>;</span><br><span class="line"><span class="comment">--创建存储过程（oracle）</span></span><br></pre></td></tr></table></figure><hr><h3 id="事务处理"><a href="#事务处理" class="headerlink" title="事务处理"></a>事务处理</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">BEGIN</span> <span class="keyword">TRANSACTION</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> Customers(cust_id, cust_name)</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="string">'1000000010'</span>, <span class="string">'Toys Emporium'</span>);</span><br><span class="line">SAVE TRANSACTION StartOrder;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> Orders(order_num, order_date, cust_id) </span><br><span class="line"><span class="keyword">VALUES</span>(<span class="number">20100</span>,<span class="string">'2001/12/1'</span>,<span class="string">'1000000010'</span>);</span><br><span class="line">IF @@ERROR &lt;&gt; 0 ROLLBACK TRANSACTION StartOrder;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> OrderItems(order_num, order_item, prod_id, quantity, item_price) </span><br><span class="line"><span class="keyword">VALUES</span>(<span class="number">20100</span>, <span class="number">1</span>, <span class="string">'BR01'</span>, <span class="number">100</span>, <span class="number">5.49</span>);</span><br><span class="line">IF @@ERROR &lt;&gt; 0 ROLLBACK TRANSACTION StartOrder;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> OrderItems(order_num, order_item, prod_id, quantity, item_price) </span><br><span class="line"><span class="keyword">VALUES</span>(<span class="number">20100</span>, <span class="number">2</span>, <span class="string">'BR03'</span>, <span class="number">100</span>, <span class="number">10.99</span>);</span><br><span class="line">IF @@ERROR &lt;&gt; 0 ROLLBACK TRANSACTION StartOrder;</span><br><span class="line"><span class="keyword">COMMIT</span> <span class="keyword">TRANSACTION</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">这里的事务处理块中包含了4条INSERT语句。在第一条INSERT语句之后定义了一个保留点,</span></span><br><span class="line"><span class="comment">因此,如果后面的任何一个INSERT操作失败,事 务处理最近回退到这里。在SQL Server中,</span></span><br><span class="line"><span class="comment">可检查一个名为@@ERROR的变量,看操作是否成功。(其他DBMS使用不同的函数或变量返回此 信息。)</span></span><br><span class="line"><span class="comment">如果@@ERROR返回一个非0的值,表示有错误发生,事务处理回退到保留点。</span></span><br><span class="line"><span class="comment">如果整个事务处理成功,发布COMMIT以保留数据。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><hr><h3 id="游标"><a href="#游标" class="headerlink" title="游标"></a>游标</h3><p>有时,需要在检索出来的行中前进或后退一行或多行,这就是游标的用途所在。游标(cursor)是一个存储在DBMS服务器上的数据库查询,<br>它不是一条SELECT语句,而是被该语句检索出来的结果集。在存储了游标之后,应用程序可以根据需要滚动或浏览其中的数据。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DECLARE</span> <span class="keyword">CURSOR</span> CustCursor <span class="keyword">IS</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> Customers </span><br><span class="line"><span class="keyword">WHERE</span> cust_email <span class="keyword">IS</span> <span class="literal">NULL</span></span><br><span class="line"><span class="comment">--创建游标</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DECLARE</span> <span class="keyword">TYPE</span> CustCursor </span><br><span class="line"><span class="keyword">IS</span> <span class="keyword">REF</span> <span class="keyword">CURSOR</span> </span><br><span class="line"><span class="keyword">RETURN</span> Customers%ROWTYPE;</span><br><span class="line"><span class="keyword">DECLARE</span> CustRecord Customers%ROWTYPE </span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">OPEN</span> CustCursor;</span><br><span class="line">FETCH CustCursor INTO CustRecord; </span><br><span class="line">CLOSE CustCursor;</span><br><span class="line"><span class="keyword">END</span>;</span><br><span class="line"><span class="comment">--使用游标OPEN CURSOR CustCursor</span></span><br><span class="line"><span class="comment">--关闭游标CLOSE CustCursor</span></span><br></pre></td></tr></table></figure><hr><h3 id="高级数据处理特性：约束、索引和触发器"><a href="#高级数据处理特性：约束、索引和触发器" class="headerlink" title="高级数据处理特性：约束、索引和触发器"></a>高级数据处理特性：约束、索引和触发器</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">INDEX</span> prod_name_ind </span><br><span class="line"><span class="keyword">ON</span> PRODUCTS (prod_name);</span><br><span class="line"><span class="comment">--创建索引</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> customer_state </span><br><span class="line"><span class="keyword">AFTER</span> <span class="keyword">INSERT</span> <span class="keyword">OR</span> <span class="keyword">UPDATE</span> <span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="keyword">ROW</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">UPDATE</span> Customers</span><br><span class="line"><span class="keyword">SET</span> cust_state = <span class="keyword">Upper</span>(cust_state) </span><br><span class="line"><span class="keyword">WHERE</span> Customers.cust_id = :OLD.cust_id </span><br><span class="line"><span class="keyword">END</span>;</span><br><span class="line"><span class="comment">--触发器</span></span><br></pre></td></tr></table></figure><hr><p>建议使用：Oracle SQL Developer</p><h3 id="SQL语句语法"><a href="#SQL语句语法" class="headerlink" title="SQL语句语法"></a>SQL语句语法</h3><p>ALTER TABLE：用来更新已存在表的结构<br>COMMIT：用来将事务写入数据库<br>CREATE INDEX：用于在一个或多个列上创建索引<br>CREATE PROCEDURE：用于创建存储过程<br>CREATE TABLE：用于创建新数据库表<br>CREATE VIEW：用来创建一个或多个表上的新视图<br>DELETE从：表中删除一行或多行<br>DROP：永久地删除数据库对象(表、视图、索引等)<br>INSERT：为表添加一行<br>INSERT SELECT：将SELECT的结果插入到一个表<br>ROLLBACK：用于撤销一个事务块<br>SELECT：用于从一个或多个表(视图)中检索数据<br>UPDATE：更新表中的一行或多行</p><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><p><strong>字符串数据类型</strong></p><table><thead><tr><th>数据类型</th><th>说明</th></tr></thead><tbody><tr><td>CHAR</td><td>1~255个字符的定长字符串。它的长度必须在创建时规定</td></tr><tr><td>NCHAR</td><td>CHAR的特殊形式,用来支持多字节或Unicode字符(此类型的不同实现变化很大)</td></tr><tr><td>NVARCHAR</td><td>TEXT的特殊形式,用来支持多字节或Unicode字符(此类型的不同实现变化很大)</td></tr><tr><td>TEXT(也称为LONG、MEMO或VARCHAR)</td><td>变长文本</td></tr></tbody></table><p>不管使用何种形式的字符串数据类型，字符串值都必须括在单引号内</p><p>如果数值是计算(求和、平均等)中使用的数值,则应该存储在数值数据类型列中;如果作为字符串(可能只包含<br> 数字)使用,则应该保存在字符串数据类型列中。</p><p><strong>数值数据类型</strong></p><table><thead><tr><th>数据类型</th><th>说明</th></tr></thead><tbody><tr><td>BIT</td><td>单个二进制位值,或者为0或者为1,主要用于开/关标志</td></tr><tr><td>DECIMAL(或NUMERIC)</td><td>定点或精度可变的浮点值</td></tr><tr><td>FLOAT(或NUMBER)</td><td>浮点值</td></tr><tr><td>INT(或INTEGER)</td><td>4字节整数值,支持-2147483648~2147483647的数</td></tr><tr><td>REAL</td><td>4字节浮点值</td></tr><tr><td>SMALLINT</td><td>2字节整数值,支持-32768~32767的数</td></tr><tr><td>TINYINT</td><td>1字节整数值,支持0~255的数</td></tr></tbody></table><p><strong>日期和时间数据类型</strong></p><table><thead><tr><th>数据类型</th><th>说明</th></tr></thead><tbody><tr><td>DATE</td><td>日期值</td></tr><tr><td>DATETIME(或TIMESTAMP)</td><td>日期时间值</td></tr><tr><td>SMALLDATETIME</td><td>日期时间值，精确到分（无秒或毫秒）</td></tr><tr><td>TIME</td><td>时间值</td></tr></tbody></table><p><strong>二进制数据类型</strong></p><table><thead><tr><th>数据类型</th><th>说明</th></tr></thead><tbody><tr><td>BINARY</td><td>定长二进制数据(最大长度从255字节到8000字节,有赖于具体的实现)</td></tr><tr><td>LONG RAW</td><td>变长二进制数据,最长2 GB</td></tr><tr><td>RAW(某些实现为BINARY)</td><td>定长二进制数据,最多255字节</td></tr><tr><td>VARBINARY</td><td>变长二进制数据(最大长度一般在255字节到8000字节间变化,依赖于具体的实现)</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      本文简要总结了SQL入门书籍《SQL必知必会》的主要内容，帮你快速了解SQL的基本语法，相信有点编程基础的人花十几分钟看完文章，就能大致明白SQL的用法了。
    
    </summary>
    
    
      <category term="DB" scheme="https://miaoq.github.io/tags/DB/"/>
    
  </entry>
  
</feed>
